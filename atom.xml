<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BLOG</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-27T21:54:34.071Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dylan Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Advanced Algorithm</title>
    <link href="http://example.com/2021/03/30/Advanced-Algorithm/"/>
    <id>http://example.com/2021/03/30/Advanced-Algorithm/</id>
    <published>2021-03-31T00:35:04.000Z</published>
    <updated>2021-04-27T21:54:34.071Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Introduction</strong> Take notes for the advanced algorithm and write down the knowledge points in each chapter  </p><a id="more"></a><h1 id="Advanced-Algorithm"><a href="#Advanced-Algorithm" class="headerlink" title="Advanced Algorithm"></a>Advanced Algorithm</h1><h2 id="Course-preview"><a href="#Course-preview" class="headerlink" title="Course preview"></a>Course preview</h2><h3 id="Lecture-schedule"><a href="#Lecture-schedule" class="headerlink" title="Lecture schedule"></a>Lecture schedule</h3><p><img src="/img/AdvancedAlgorithm/1_01.jpg">   </p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Four old problems  </p><ul><li>primarily testing: determine if a given integer is prime  </li><li>dictionary problem: design an efficient data structure that support find, insert, and delete operations  </li><li>minimum spanning trees  </li><li>string matching: find all occurrences of a pattern string p in a text string t  </li></ul><p>Two new tools</p><ul><li>randomized algorithms: have access to a random source    </li><li>amortized analysis: worst-case analysis of a sequence of operations  </li></ul><h2 id="Primarily-Testing"><a href="#Primarily-Testing" class="headerlink" title="Primarily Testing"></a>Primarily Testing</h2><h3 id="Problem-defination"><a href="#Problem-defination" class="headerlink" title="Problem defination"></a>Problem defination</h3><p><img src="/img/AdvancedAlgorithm/1_02.jpg">   </p><h3 id="brute-force-solution"><a href="#brute-force-solution" class="headerlink" title="brute-force solution"></a>brute-force solution</h3><p><img src="/img/AdvancedAlgorithm/1_03.jpg">  </p><p>Q &amp; A:  </p><ol><li><p>why the loop is from 2 to √n<br>A prime number is a number that is not divisible by any number other than itself and 1. Therefore, we start from 2. And this loop is to check whether there is a pair p * q = n = √n * √n, therefore, the smaller one in p and q musct smaller or equal than √n. So the iteration from 2 to √n will cover all possibilities.</p></li><li><p>why √N = 2<sup>(lg(N)/2)</sup><br>√N = 2<sup>(lg(√N))</sup> = 2<sup>(lg (N<sup>1/2</sup>))</sup> = 2<sup>(1/2*lg(N))</sup></p></li><li><p>why (√2)<sup>lgN</sup> = √2<sup>n</sup><br>n is the binary bit of this N</p></li></ol><table><thead><tr><th align="center">N</th><th align="center">lgN + 1</th><th align="center">n</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">lg1 + 1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">lg2 + 1</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">lg3 + 1</td><td align="center">2</td></tr><tr><td align="center">4</td><td align="center">lg4 + 1</td><td align="center">3</td></tr><tr><td align="center">5</td><td align="center">lg5 + 1</td><td align="center">3</td></tr></tbody></table><p>And let’s think of lgN + 1 as lgN, we dismiss plus 1 here where N is big enough.</p><ol start="4"><li>why this algorithm is exponential?<br>the running time is θ((√2)<sup>n</sup>), n is the bit of value N, and we look n here is input size. Therefore, the running time is exponential.</li></ol><h2 id="Dictionary-Problem"><a href="#Dictionary-Problem" class="headerlink" title="Dictionary Problem"></a>Dictionary Problem</h2><h3 id="Problem-defination-1"><a href="#Problem-defination-1" class="headerlink" title="Problem defination"></a>Problem defination</h3><p><img src="/img/AdvancedAlgorithm/1_04.jpg">  </p><h3 id="O-1-Time-amp-O-n-Space-solution"><a href="#O-1-Time-amp-O-n-Space-solution" class="headerlink" title="O(1) Time &amp; O(n) Space solution"></a>O(1) Time &amp; O(n) Space solution</h3><p><img src="/img/AdvancedAlgorithm/1_05.jpg">  </p><h3 id="BST-solution"><a href="#BST-solution" class="headerlink" title="BST solution"></a>BST solution</h3><p><img src="/img/AdvancedAlgorithm/1_06.jpg"><br><strong>note</strong><br>BST: binary serach tree, quite slow in reality.<br>2-3 Tree: a tree whose nodes can have two or three children nodes. Hard to implement.  </p><h3 id="New-solution"><a href="#New-solution" class="headerlink" title="New solution"></a>New solution</h3><ul><li>splay tree: amortized BST<br>When a node x is accessed, a splay operation is performed on x to move it to the root. To perform a splay operation we carry out a sequence of splay steps, each of which moves x closer to the root. By performing a splay operation on the node of interest after every access, the recently accessed nodes are kept near the root and the tree remains roughly balanced, so that we achieve the desired amortized time bounds.</li><li>treaps: randomized BST<br>Treap = Tree + Heap. Treap itself is a binary search tree, its left subtree and the right subtree are also a Treap, and the common binary search tree is different, Treap records an additional data, is the priority. Treap not only forms a binary search tree with key codes, but also satisfies the property of heap. Treap’s approach to maintaining heap properties uses rotations, which require only two rotations and are less programming complicated than Splay’s.</li><li>skip lists: randomized linked lists<br><strong>normal linked list: insert &amp; delete O(1), checkO(n)</strong><br>Skiplist uses the idea of <strong>space for time</strong><br><img src="/img/AdvancedAlgorithm/1_07.jpg"><br>use binary search improve search efficiency.<br>the blew one is original linked list, the middle one is original list divided into four parts, the top one is original list divided into two parts. And if we want to search 7.<br>the original search range is (H, T)  </li></ul><ol><li>in the top list, 7 &gt; 4, search range becomes (4, T)</li><li>in the middle list, 7 &gt; 6, search range becomes (6, 7)</li><li>in the below list, 7 == 7, search success!</li></ol><p>In general, Skiplist stores additional intermediate information for binary lookups</p><h2 id="Minimum-Spanning-Trees"><a href="#Minimum-Spanning-Trees" class="headerlink" title="Minimum Spanning Trees"></a>Minimum Spanning Trees</h2><h3 id="Problem-defination-2"><a href="#Problem-defination-2" class="headerlink" title="Problem defination"></a>Problem defination</h3><p><img src="/img/AdvancedAlgorithm/1_08.jpg"><br><strong>connect all nodes, no cycle, minimum weight</strong></p><h3 id="Kruskal-algorithm"><a href="#Kruskal-algorithm" class="headerlink" title="Kruskal algorithm"></a>Kruskal algorithm</h3><h3 id="Algorithm-introduction"><a href="#Algorithm-introduction" class="headerlink" title="Algorithm introduction"></a>Algorithm introduction</h3><p>sort weight ascendingly, iterate every edge, if the nodes on the edge is in different group, use this edge and let one node join the other.</p><h3 id="Prim-algorithm"><a href="#Prim-algorithm" class="headerlink" title="Prim algorithm"></a>Prim algorithm</h3><h3 id="Algorithm-introduction-1"><a href="#Algorithm-introduction-1" class="headerlink" title="Algorithm introduction"></a>Algorithm introduction</h3><ol><li><p>Add one node to the set V</p></li><li><p>while(not all nodes in set V) {  </p><ul><li>find the least weighted edge from the nodes in the set V to the nodes outside the set  </li><li>then add this edge and this outer node to the set V<br>}</li></ul></li></ol><h3 id="Disjoint-set"><a href="#Disjoint-set" class="headerlink" title="Disjoint set"></a>Disjoint set</h3><p>alias: Union-find</p><h3 id="Fibonacci-heap"><a href="#Fibonacci-heap" class="headerlink" title="Fibonacci heap"></a>Fibonacci heap</h3><p>A Fibonacci heap is a collection of trees satisfying the minimum-heap property, that is, the key of a child is always greater than or equal to the key of the parent. This implies that the minimum key is always at the root of one of the trees.</p><h2 id="String-Matching"><a href="#String-Matching" class="headerlink" title="String Matching"></a>String Matching</h2><h3 id="Problem-defination-3"><a href="#Problem-defination-3" class="headerlink" title="Problem defination"></a>Problem defination</h3><p><img src="/img/AdvancedAlgorithm/1_09.jpg">  </p><h3 id="Classic-solutions"><a href="#Classic-solutions" class="headerlink" title="Classic solutions"></a>Classic solutions</h3><ul><li>variations of brute-force algorithm, θ(mn);</li><li>KMP(Knuth-Morris-Pratt) algorith, first θ(m + n);</li><li>Boyer-Moore is the fastest in practice;</li><li>Karp-Rabin runs in expected θ(n+m);</li><li>Z algorithm a new preprocessing technique that underlies both KMP and BM;</li><li>These modifications preprocess the pattern;</li></ul><h2 id="Generating-Random-Sequences-Of-Integers"><a href="#Generating-Random-Sequences-Of-Integers" class="headerlink" title="Generating Random Sequences Of Integers"></a>Generating Random Sequences Of Integers</h2><h3 id="Desirable-properites-of-rand-n"><a href="#Desirable-properites-of-rand-n" class="headerlink" title="Desirable properites of rand(n)"></a>Desirable properites of rand(n)</h3><ul><li>not truly random, but only appears random according to various statistical tests(such as equal number of 0, …, n - 1 in a long generated sequence)</li><li>efficiently computable and determinstic(reproducible)</li></ul><h3 id="Computing-∏-using-rand"><a href="#Computing-∏-using-rand" class="headerlink" title="Computing ∏ using rand()"></a>Computing ∏ using rand()</h3><p><img src="/img/AdvancedAlgorithm/1_10.jpg">   </p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p><img src="/img/AdvancedAlgorithm/1_11.jpg">   </p><h3 id="Sample-run"><a href="#Sample-run" class="headerlink" title="Sample run"></a>Sample run</h3><p><img src="/img/AdvancedAlgorithm/1_12.jpg">   </p><h1 id="Randomized-Algorithm"><a href="#Randomized-Algorithm" class="headerlink" title="Randomized Algorithm"></a>Randomized Algorithm</h1><h2 id="Review-of-probability-theory"><a href="#Review-of-probability-theory" class="headerlink" title="Review of probability theory"></a>Review of probability theory</h2><h3 id="Random-Variables"><a href="#Random-Variables" class="headerlink" title="Random Variables"></a>Random Variables</h3><p><img src="/img/AdvancedAlgorithm/2_06.jpg">   </p><h3 id="Expected-Value"><a href="#Expected-Value" class="headerlink" title="Expected Value"></a>Expected Value</h3><p><img src="/img/AdvancedAlgorithm/2_07.jpg">   </p><h3 id="Linearity-Of-Expected-Values"><a href="#Linearity-Of-Expected-Values" class="headerlink" title="Linearity Of Expected Values"></a>Linearity Of Expected Values</h3><p><img src="/img/AdvancedAlgorithm/2_08.jpg">   </p><h3 id="Indicator-Random-Variables"><a href="#Indicator-Random-Variables" class="headerlink" title="Indicator Random Variables"></a>Indicator Random Variables</h3><p><img src="/img/AdvancedAlgorithm/2_09.jpg">  </p><p><strong>Example 1</strong><br><img src="/img/AdvancedAlgorithm/2_10.jpg">   </p><p><strong>Example 2</strong><br><img src="/img/AdvancedAlgorithm/2_11.jpg">   </p><p><strong>Simpler Solution using linearlity of expected values</strong><br><img src="/img/AdvancedAlgorithm/2_12.jpg">   </p><h3 id="Binomial-Random-Variable-Bn-p"><a href="#Binomial-Random-Variable-Bn-p" class="headerlink" title="Binomial Random Variable Bn,p"></a>Binomial Random Variable B<sub>n,p</sub></h3><p><img src="/img/AdvancedAlgorithm/2_13.jpg">   </p><h3 id="An-Infinite-Sum"><a href="#An-Infinite-Sum" class="headerlink" title="An Infinite Sum"></a>An Infinite Sum</h3><p><img src="/img/AdvancedAlgorithm/2_14.jpg">   </p><p>note:<br>since 1/(1-a) = 1 + a + a<sup>2</sup> + a<sup>3</sup> + …<br>(1/(1/a))<sup>2</sup> = (1 + a + a<sup>2</sup> + a<sup>3</sup> + …)<sup>2</sup><br>= 1 + a + a<sup>2</sup> + a<sup>3</sup> + …  </p><ul><li>0 + a + a<sup>2</sup> + a<sup>3</sup> + …  </li><li>0 + 0 + a<sup>2</sup> + a<sup>3</sup> + …  </li><li>0 + 0 + 0 + a<sup>3</sup> + …  </li><li>…<br>= 1 + 2a + 3a<sup>2</sup> + 4a<sup>3</sup> + …<br>= ∑(i=1-∞)ia<sup>i-1<sup></li></ul><p>​    </p><h3 id="Geometric-random-variables-Gp"><a href="#Geometric-random-variables-Gp" class="headerlink" title="Geometric random variables Gp"></a>Geometric random variables G<sub>p</sub></h3><p><img src="/img/AdvancedAlgorithm/2_15.jpg">   </p><p><strong>Q&amp;A</strong><br>why p∑i(1-p)<sup>i-1</sup> = p / (1 - (1 - p))<sup>2</sup><br>because theorem ∑ia<sup>i-1</sup> = 1 / (1-a)<sup>2</sup> a ≠ 1</p><h3 id="Harmonic-Numbers"><a href="#Harmonic-Numbers" class="headerlink" title="Harmonic Numbers"></a>Harmonic Numbers</h3><p><img src="/img/AdvancedAlgorithm/2_16.jpg">   </p><p>Q&amp;A:  </p><ol><li>Why H<sub>n</sub> ≥ ln(n+1)<br>use the <strong>upper bound</strong> to calculate rectangle area<br>area = 1 + 1/2 + 1/3 + … + 1/(n-1) = H<sub>n-1</sub><br>And ln(n) is under area of this curve, since (ln(n))’ = 1/n<br>therefore, H<sub>n-1</sub> ≥ ln(n), then replace n with n+1, we get H<sub>n</sub> ≥ ln(n+1)</li><li>Why H<sub>n</sub> ≤ ln(n) + 1<br>use the <strong>lower bound</strong> to calculate rectangle area<br>area = 1/2 + 1/3 + … + 1/n = H<sub>n</sub> - 1<br>And ln(n) is under area of this curve, since (ln(n))’ = 1/n<br>therefore, H<sub>n</sub> - 1 ≤ ln(n), H<sub>n</sub> ≤ ln(n) + 1</li></ol><h2 id="Randomized-Searching"><a href="#Randomized-Searching" class="headerlink" title="Randomized Searching"></a>Randomized Searching</h2><h3 id="Problem-defination-4"><a href="#Problem-defination-4" class="headerlink" title="Problem defination"></a>Problem defination</h3><p><img src="/img/AdvancedAlgorithm/2_01.jpg">   </p><h3 id="Deterministic-Solution"><a href="#Deterministic-Solution" class="headerlink" title="Deterministic Solution"></a>Deterministic Solution</h3><p><img src="/img/AdvancedAlgorithm/2_02.jpg">  </p><h3 id="Solution-Analysis"><a href="#Solution-Analysis" class="headerlink" title="Solution Analysis"></a>Solution Analysis</h3><p><img src="/img/AdvancedAlgorithm/2_03.jpg">   </p><h3 id="Randomized-Solution"><a href="#Randomized-Solution" class="headerlink" title="Randomized Solution"></a>Randomized Solution</h3><p><img src="/img/AdvancedAlgorithm/2_04.jpg">   </p><h3 id="Solution-Analysis-1"><a href="#Solution-Analysis-1" class="headerlink" title="Solution Analysis"></a>Solution Analysis</h3><p><img src="/img/AdvancedAlgorithm/2_05.jpg">   </p><h3 id="Average-time"><a href="#Average-time" class="headerlink" title="Average time"></a>Average time</h3><p><strong>T</strong> is the iteration times<br><strong>when target is in array</strong><br><img src="/img/AdvancedAlgorithm/2_17.jpg"><br><strong>when target is not in array</strong><br><img src="/img/AdvancedAlgorithm/2_18.jpg"><br><img src="/img/AdvancedAlgorithm/2_19.jpg">   </p><h3 id="Example-Coupon-Collection"><a href="#Example-Coupon-Collection" class="headerlink" title="Example-Coupon Collection"></a>Example-Coupon Collection</h3><p><img src="/img/AdvancedAlgorithm/2_20.jpg">  </p><h2 id="Randomized-Sorting"><a href="#Randomized-Sorting" class="headerlink" title="Randomized Sorting"></a>Randomized Sorting</h2><h3 id="Problem-defination-5"><a href="#Problem-defination-5" class="headerlink" title="Problem defination"></a>Problem defination</h3><p><img src="/img/AdvancedAlgorithm/3_01.jpg">   </p><h3 id="Deterministic-Quicksort"><a href="#Deterministic-Quicksort" class="headerlink" title="Deterministic Quicksort"></a>Deterministic Quicksort</h3><p><img src="/img/AdvancedAlgorithm/3_02.jpg">  </p><h3 id="Solution-Analysis-2"><a href="#Solution-Analysis-2" class="headerlink" title="Solution Analysis"></a>Solution Analysis</h3><p><img src="/img/AdvancedAlgorithm/3_03.jpg"><br><strong>Average case</strong><br>the partition are evenly, the depth of recursive tree is log(n) + 2  </p><pre><code>T（n）≤2T（n/2） +n，T（1）=0  (you need to compare all elements to find the right position of pivot)T（n）≤2（2T（n/4）+n/2） +n=4T（n/4）+2n  T（n）≤4（2T（n/8）+n/4） +2n=8T（n/8）+3n  ……  T（n）≤nT（1）+（log2n）×n= O(nlogn)  (every level compare n times total, logn level compare nlogn times)</code></pre><p>therefore, the running time is O(nlogn).</p><p><strong>Worst case</strong><br>the input array is totally ascending or descending, every partition just reduce one element, that is, its left or right is empty. So it need n iterations, and in each iteration the pivot needs to compare with all other elements. The running time is O(n<sup>2</sup>)</p><p><strong>each input permutation is equally likely</strong><br>the array is input randomly. Every input order has same probability.</p><h3 id="Randomized-Quicksort"><a href="#Randomized-Quicksort" class="headerlink" title="Randomized Quicksort"></a>Randomized Quicksort</h3><p><img src="/img/AdvancedAlgorithm/3_04.jpg">  </p><h3 id="Expected-running-time-analysis"><a href="#Expected-running-time-analysis" class="headerlink" title="Expected running time analysis"></a>Expected running time analysis</h3><p><strong>Notation</strong></p><p>For a fixed input array A[0..n-1]:</p><ul><li>Let C be the random variable counting the number comparisons made by randomized quicksort.</li><li>Let a<sub>i</sub> denote the i <sup>th</sup> smallest element of A[0..n-1], a<sub>i</sub> is not the element at position i. </li></ul><h4 id="When-is-Ci-j-is-1"><a href="#When-is-Ci-j-is-1" class="headerlink" title="When is Ci,j is 1?"></a>When is C<sub>i,j</sub> is 1?</h4><p><img src="/img/AdvancedAlgorithm/3_06.jpg">   </p><p><strong>P(C<sub>i,j</sub> = 1) = 2/(j-i+1)</strong><br> since there are j - i + 1 elements in a<sub>i</sub>…a<sub>j</sub>. C<sub>i,j</sub> == 1 when C<sub>i</sub> or C<sub>j</sub> is pivot,. And each element has the same probability to become pivot, therefore, P(C<sub>i,j</sub> == 1) = 2/(j-i+1).</p><h4 id="Using-linearity-of-expection-to-compute-E-C"><a href="#Using-linearity-of-expection-to-compute-E-C" class="headerlink" title="Using linearity of expection to compute E[C]"></a>Using linearity of expection to compute E[C]</h4><p><img src="/img/AdvancedAlgorithm/3_05.jpg"><br><img src="/img/AdvancedAlgorithm/3_07.jpg">  </p><h2 id="Randomized-Selection"><a href="#Randomized-Selection" class="headerlink" title="Randomized Selection"></a>Randomized Selection</h2><h3 id="Problem-defination-6"><a href="#Problem-defination-6" class="headerlink" title="Problem defination"></a>Problem defination</h3><p><img src="/img/AdvancedAlgorithm/3_08.jpg">  </p><h3 id="Deterministic-QuickSelect"><a href="#Deterministic-QuickSelect" class="headerlink" title="Deterministic QuickSelect"></a>Deterministic QuickSelect</h3><p><img src="/img/AdvancedAlgorithm/3_09.jpg">   </p><h3 id="Solution-Analysis-3"><a href="#Solution-Analysis-3" class="headerlink" title="Solution Analysis"></a>Solution Analysis</h3><p><img src="/img/AdvancedAlgorithm/3_10.jpg">   </p><h3 id="Randomized-QuickSelect"><a href="#Randomized-QuickSelect" class="headerlink" title="Randomized QuickSelect"></a>Randomized QuickSelect</h3><p><img src="/img/AdvancedAlgorithm/3_11.jpg">   </p><h3 id="Solution-Analysis-4"><a href="#Solution-Analysis-4" class="headerlink" title="Solution Analysis"></a>Solution Analysis</h3><p>Assumption:<br>For a fixed input array <strong>A</strong> of size n and a fixed rank <strong>k</strong><br>Let <strong>C</strong> be the random variable counting the number of comparisons.<br>Let <strong>a<sub>i</sub></strong> be the <strong>i<sup>th</sup></strong> smallest value in A.<br>C = ∑<sub>1&lt;=i&lt;=j&lt;=n</sub>C<sub>i,j</sub>, where<br>C<sub>i</sub> = 1 if a<sub>i</sub> and a<sub>j</sub> is compared<br>E[C] = E[∑<sub>1&lt;=i&lt;=j&lt;=n</sub>C<sub>i,j</sub>] = ∑E[C<sub>i,j</sub>] = ∑P(C<sub>i,j</sub> = 1)</p><h4 id="when-Ci-j-1"><a href="#when-Ci-j-1" class="headerlink" title="when Ci,j = 1?"></a>when C<sub>i,j</sub> = 1?</h4><p>i is always less than j  </p><ol><li>k &lt;= i &lt; j<br>Let a<sub>p</sub> be the next pivot:  <ul><li>p &lt; k or p &gt; j, a<sub>i</sub> and a<sub>j</sub> and k will belong to the same partition.</li><li>k &lt;= p &lt; i, a<sub>i</sub> and a<sub>j</sub> will never be compared, C<sub>i,j</sub> = 0.</li><li>i &lt; p &lt; j, a<sub>i</sub> and a<sub>j</sub> will belong to different partition, they will never be compared, C<sub>i,j</sub> = 0.</li><li>p = i or p = j, pivot will be compared with every other elements, C<sub>i,j</sub> = 1.</li></ul></li></ol><p>Since each element in the set(a<sub>k</sub>, a<sub>k+1</sub>, a<sub>k+2</sub>, …… a<sub>j</sub>) has equal chance of being selected as the pivot.<br><strong>P(C<sub>i,j</sub>=1) = 2 / (j-k+1)</strong></p><h5 id="summing-over-all-k-lt-i-lt-j-lt-n"><a href="#summing-over-all-k-lt-i-lt-j-lt-n" class="headerlink" title="summing over all k &lt;=i &lt; j &lt;= n"></a>summing over all k &lt;=i &lt; j &lt;= n</h5><p><img src="/img/AdvancedAlgorithm/3_12.jpg">   </p><ol start="2"><li>i &lt; j &lt;= k<br>Let a<sub>p</sub> be the next pivot:  <ul><li>p &lt; i or p &gt; k, a<sub>i</sub> and a<sub>j</sub> and k will belong to the same partition.</li><li>j &lt; p &lt;= k, a<sub>i</sub> and  a<sub>j</sub> are discarded and C<sub>i,j</sub> = 0.</li><li>i &lt; p &lt; j: a<sub>i</sub> and  a<sub>j</sub> will never be compared and C<sub>i,j</sub> = 0.</li><li>p = i or p = j, C<sub>i,j</sub> = 1.  </li></ul></li></ol><p>Since each element in the set(a<sub>i</sub>, a<sub>i+1</sub>, a<sub>i+2</sub>, …… a<sub>k</sub>) has equal chance of being selected as the pivot.<br><strong>P(C<sub>i,j</sub>=1) = 2 / (k-i+1)</strong></p><h5 id="summing-over-all-1-lt-i-lt-j-lt-k"><a href="#summing-over-all-1-lt-i-lt-j-lt-k" class="headerlink" title="summing over all 1 &lt;=i &lt; j &lt;= k"></a>summing over all 1 &lt;=i &lt; j &lt;= k</h5><p><img src="/img/AdvancedAlgorithm/3_13.jpg">  </p><ol start="3"><li>i &lt; k &lt; j<br>Let a<sub>p</sub> be the next pivot:  <ul><li>p &lt; i or p &gt; j, a<sub>i</sub> and a<sub>j</sub> and k will belong to the same partition.</li><li>i &lt; p &lt; j, a<sub>i</sub> and a<sub>j</sub> will never be compared, C<sub>i,j</sub> = 0.</li><li>p = i or p = j, C<sub>i,j</sub> = 1.  </li></ul></li></ol><p>Since each element in the set(a<sub>i</sub>, a<sub>i+1</sub>, a<sub>i+2</sub>, …… a<sub>j</sub>) has equal chance of being selected as the pivot.<br><strong>P(C<sub>i,j</sub>=1) = 2 / (j-i+1)</strong></p><h5 id="summing-over-all-1-lt-i-lt-k-lt-j-lt-n"><a href="#summing-over-all-1-lt-i-lt-k-lt-j-lt-n" class="headerlink" title="summing over all 1 &lt;= i &lt; k &lt; j &lt;= n"></a>summing over all 1 &lt;= i &lt; k &lt; j &lt;= n</h5><p><img src="/img/AdvancedAlgorithm/3_14.jpg"><br>Q&amp;A:</p><ol><li><p>why the range of <strong>s</strong> is from max{1, k-d+1} to min{k-1, n-1-d}?<br><strong>s</strong> is from max{1, k-d+1}. Because the minimize distance between k and j is 1, the distance between i and j is d, therefore the distance between i and k is max (k-(d-1)) = k-d+1. At the same time, the start must be positive. So the start is from max{1, k-d+1}.<br><strong>s</strong> is to {k-1, n-1-d}. Because the maximize j is n-1, and the distance between i and j is d, therefore, the maximize i(start) is n-1-d. At the same time, i is smaller than k. So the start is to min{k-1, n-1-d}.  </p></li><li><p>What is the purpose of the segmentation in second row?<br>Divide <strong>d</strong> into two parts according to whether it is greater than k.<br>In the first part, because d is smaller or equal to k, therefore k-d+1 must be postive, and <strong>i</strong>(start) must smaller than k, therefore the range is from k-d+1 to k-1.<br>In the second part, because d is larger than k, therefore k-d+1 must be negative, so we choose 1 be the start, and from the same reason the maximize start is k-1, so the range is from 1 to k-1.</p></li><li><p>Why we can change k to d directly in row 3 to row 4?<br>In the second part, d is bigger than k. So if the fourth row is less than the third row, we can just replace k with d. </p></li><li><p>Why ∑(2(d-1)/(d+1))+∑(2(d-1)/(d+1)) &lt; 2(k-2)+2(n-k)?<br><img src="/img/AdvancedAlgorithm/3_15.jpg">  </p></li></ol><h4 id="E-C-lt-θ-n"><a href="#E-C-lt-θ-n" class="headerlink" title="E[C] &lt; θ(n)"></a>E[C] &lt; θ(n)</h4><p>adding all situations<br><img src="/img/AdvancedAlgorithm/3_16.jpg">  </p><h4 id="Esxactly-Formula-Of-E-C"><a href="#Esxactly-Formula-Of-E-C" class="headerlink" title="Esxactly Formula Of E[C]"></a>Esxactly Formula Of E[C]</h4><p><img src="/img/AdvancedAlgorithm/3_17.jpg">  </p><h2 id="Primality-Testing"><a href="#Primality-Testing" class="headerlink" title="Primality Testing"></a>Primality Testing</h2><h3 id="Problem-Defination"><a href="#Problem-Defination" class="headerlink" title="Problem Defination"></a>Problem Defination</h3><p><img src="/img/AdvancedAlgorithm/4_01.jpg">  </p><h3 id="Upper-Bound"><a href="#Upper-Bound" class="headerlink" title="Upper Bound"></a>Upper Bound</h3><p><img src="/img/AdvancedAlgorithm/4_02.jpg"><br><img src="/img/AdvancedAlgorithm/4_03.jpg">  </p><h3 id="Randomized-Solution-Fermat-test"><a href="#Randomized-Solution-Fermat-test" class="headerlink" title="Randomized Solution:Fermat test"></a>Randomized Solution:Fermat test</h3><h4 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h4><p><img src="/img/AdvancedAlgorithm/4_04.jpg">  </p><h4 id="Theorem-Proof"><a href="#Theorem-Proof" class="headerlink" title="Theorem Proof"></a>Theorem Proof</h4><p><img src="/img/AdvancedAlgorithm/4_05.jpg">  </p><p><strong>Q&amp;A</strong>  </p><ol><li>Why {1a, 2a, 3a, … (p-1)a} = {1, 2, 3, …, p-1} mod p?<br>For any prime <strong>p</strong> and any <strong>a</strong> smaller than p, the left is the same set with right.<br>For example p = 5, a = 3.<br>left={1,2,3,4}, right = {3,1,4,2}.  </li><li>What does that mean if ab = 0 (mod p)?<br>it means p%a = 0 or p%b = 0.  </li><li>Why (1a)(2a)…(p-1)a = ((1)(2)…(p-1))(mod p)?<br>Since the left and right is the same set, so the product of all elements is equal. That is, the product of {1,2,3,4} is equal to the product of {3,1,4,2}.  </li></ol><h4 id="New-Idea"><a href="#New-Idea" class="headerlink" title="New Idea"></a>New Idea</h4><p><img src="/img/AdvancedAlgorithm/4_06.jpg">  </p><h4 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h4><p><img src="/img/AdvancedAlgorithm/4_07.jpg"><br><img src="/img/AdvancedAlgorithm/4_08.jpg">  </p><h4 id="Error-Situation"><a href="#Error-Situation" class="headerlink" title="Error Situation"></a>Error Situation</h4><p>When N is 3*5 = 15, the a is 4, the answer is incorrect.<br><img src="/img/AdvancedAlgorithm/4_09.jpg">  </p><h4 id="Error-Probability"><a href="#Error-Probability" class="headerlink" title="Error Probability"></a>Error Probability</h4><p>fermat(N) errors only if N is composite.<br><strong>ϕ(N) = {0&lt;a&lt;N, gcd(a,N)=1}</strong>  </p><ul><li>If N has one Fermat witness a that it is composite, then there must be a lot witnesses they are composited and the error probablity is at most 1/2.<br>That is because If there is one witness <strong>a</strong> and other nonwitness set {b<sub>1</sub>, b<sub>2</sub>, b<sub>2</sub>, b<sub>3</sub>, …}, there must be a witness set {ab<sub>1</sub>, ab<sub>2</sub>, ab<sub>2</sub>, ab<sub>3</sub>, …}, So there are at least 1/2 witness, the error probability at most is 1/2.</li><li>If N has no Fermat witness, then the error rate is at least ϕ(N)/N -&gt; 1/N -&gt; ∞, where ϕ(N) is the number of positive integers smaller than and coprime with N.</li></ul><h4 id="Reduce-Error-Probability-from-1-2-to-insignificant"><a href="#Reduce-Error-Probability-from-1-2-to-insignificant" class="headerlink" title="Reduce Error Probability from 1/2 to insignificant"></a>Reduce Error Probability from 1/2 to insignificant</h4><p><img src="/img/AdvancedAlgorithm/4_10.jpg">  </p><h4 id="Carmichael-numbers"><a href="#Carmichael-numbers" class="headerlink" title="Carmichael numbers"></a>Carmichael numbers</h4><p><img src="/img/AdvancedAlgorithm/4_11.jpg">  </p><h3 id="Randomized-Solution-Miller-Rabin"><a href="#Randomized-Solution-Miller-Rabin" class="headerlink" title="Randomized Solution:Miller-Rabin"></a>Randomized Solution:Miller-Rabin</h3><h4 id="Theorem-1"><a href="#Theorem-1" class="headerlink" title="Theorem"></a>Theorem</h4><p><img src="/img/AdvancedAlgorithm/4_12.jpg">  </p><h4 id="Modified-Theorem"><a href="#Modified-Theorem" class="headerlink" title="Modified Theorem"></a>Modified Theorem</h4><p><img src="/img/AdvancedAlgorithm/4_13.jpg">  </p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p><img src="/img/AdvancedAlgorithm/4_14.jpg">  </p><h4 id="Implementation-Idea"><a href="#Implementation-Idea" class="headerlink" title="Implementation Idea"></a>Implementation Idea</h4><p><img src="/img/AdvancedAlgorithm/4_15.jpg"><br><img src="/img/AdvancedAlgorithm/4_16.jpg"><br><strong>Q&amp;A</strong>  </p><ol><li>Why N-1 == -1?  </li></ol><p>-1 = (N-1) mode (N). Like 64 = -1 (mod 13) = 12 (mod 13)<br>Since mod just return positive result in C++, so we choose N-1 here.</p><h4 id="Solution-Analysis-5"><a href="#Solution-Analysis-5" class="headerlink" title="Solution Analysis"></a>Solution Analysis</h4><p><img src="/img/AdvancedAlgorithm/4_17.jpg">  </p><h4 id="Error-Situation-1"><a href="#Error-Situation-1" class="headerlink" title="Error Situation"></a>Error Situation</h4><p><img src="/img/AdvancedAlgorithm/4_18.jpg"><br><img src="/img/AdvancedAlgorithm/4_19.jpg" alt="Example">  </p><h4 id="Error-Probability-1"><a href="#Error-Probability-1" class="headerlink" title="Error Probability"></a>Error Probability</h4><p><img src="/img/AdvancedAlgorithm/4_20.jpg" alt="Example">  </p><h4 id="Reduce-Error-Probability-from-1-4-to-insignificant"><a href="#Reduce-Error-Probability-from-1-4-to-insignificant" class="headerlink" title="Reduce Error Probability from 1/4 to insignificant"></a>Reduce Error Probability from 1/4 to insignificant</h4><p><img src="/img/AdvancedAlgorithm/4_21.jpg"> </p><h1 id="Amortized-Analysis"><a href="#Amortized-Analysis" class="headerlink" title="Amortized Analysis"></a>Amortized Analysis</h1><h2 id="What-Is-Amortized-Analysis"><a href="#What-Is-Amortized-Analysis" class="headerlink" title="What Is Amortized Analysis"></a>What Is Amortized Analysis</h2><p><img src="/img/AdvancedAlgorithm/5_01.jpg">  </p><h3 id="A-Toy-Example-The-K-bit-Binary-Counter"><a href="#A-Toy-Example-The-K-bit-Binary-Counter" class="headerlink" title="A Toy Example: The K-bit Binary Counter"></a>A Toy Example: The K-bit Binary Counter</h3><h4 id="Counter-Data-Structure"><a href="#Counter-Data-Structure" class="headerlink" title="Counter Data Structure"></a>Counter Data Structure</h4><p><img src="/img/AdvancedAlgorithm/5_02.jpg">  </p><h4 id="Traditional-Analysis"><a href="#Traditional-Analysis" class="headerlink" title="Traditional Analysis"></a>Traditional Analysis</h4><pre><code>The worst running time of one increment is k bit flips.  The worst running time of m increments is km bit flips.  However, from real running in reality, the running time of m increments is 2m bit flips.</code></pre><p><strong>How to get the correct result?</strong>  </p><h4 id="Amortized-Analysis-1"><a href="#Amortized-Analysis-1" class="headerlink" title="Amortized Analysis"></a>Amortized Analysis</h4><h5 id="Aggregate-counting"><a href="#Aggregate-counting" class="headerlink" title="Aggregate counting"></a>Aggregate counting</h5><p><img src="/img/AdvancedAlgorithm/5_03.jpg"><br><strong>Generalizing: bit <em>i</em> flip once evert 2<sup>i</sup> increment’s</strong><br><img src="/img/AdvancedAlgorithm/5_04.jpg">  </p><h5 id="Funny-accounting"><a href="#Funny-accounting" class="headerlink" title="Funny accounting"></a>Funny accounting</h5><p><img src="/img/AdvancedAlgorithm/5_05.jpg"><br><img src="/img/AdvancedAlgorithm/5_06.jpg"><br><strong>Why amortized cost &gt;= acutal cost</strong><br>That is because <strong>reset</strong> operations occurs after <strong>set</strong> operations.  </p><h5 id="Potential-function"><a href="#Potential-function" class="headerlink" title="Potential function"></a>Potential function</h5><p><img src="/img/AdvancedAlgorithm/5_07.jpg">  </p><h5 id="How-to-pick-φ？"><a href="#How-to-pick-φ？" class="headerlink" title="How to pick φ？"></a>How to pick φ？</h5><p><img src="/img/AdvancedAlgorithm/5_08.jpg"><br><strong>Note</strong><br>C<sub>i</sub> = C<sub>set</sub> + C<sub>reset</sub> = 2 + 0 = 2.  </p><h3 id="Dynamic-Stacks"><a href="#Dynamic-Stacks" class="headerlink" title="Dynamic Stacks"></a>Dynamic Stacks</h3><h4 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h4><p><img src="/img/AdvancedAlgorithm/5_09.jpg">  </p><h4 id="Implementation-2"><a href="#Implementation-2" class="headerlink" title="Implementation"></a>Implementation</h4><h5 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h5><p><img src="/img/AdvancedAlgorithm/5_10.jpg">  </p><h5 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h5><p><img src="/img/AdvancedAlgorithm/5_11.jpg">  </p><h5 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h5><p><img src="/img/AdvancedAlgorithm/5_12.jpg">  </p><h5 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h5><p><img src="/img/AdvancedAlgorithm/5_13.jpg">  </p><h4 id="Traditional-Analysis-1"><a href="#Traditional-Analysis-1" class="headerlink" title="Traditional Analysis"></a>Traditional Analysis</h4><p><img src="/img/AdvancedAlgorithm/5_14.jpg"><br>    The worst running time of one operation is linear of array size<br>    The worst running time of m operations is ∑(i= 1 to m) i = φ(m<sup>2</sup>)<br>    However, from real running in reality, the running time of m operations is linear in array size  </p><h4 id="Amortized-Analysis-2"><a href="#Amortized-Analysis-2" class="headerlink" title="Amortized Analysis"></a>Amortized Analysis</h4><h5 id="Example-m-pushes"><a href="#Example-m-pushes" class="headerlink" title="Example: m pushes"></a>Example: m pushes</h5><h6 id="Aggregate-counting-1"><a href="#Aggregate-counting-1" class="headerlink" title="Aggregate counting"></a>Aggregate counting</h6><p><img src="/img/AdvancedAlgorithm/5_15.jpg"><br><strong>Q&amp;A</strong>  </p><ol><li><p>Why we use lg(m) rather than lg(m-1) here, Two to the power doesn’t need any new expansion?<br>Because we calculate upper bound here. It just use lg(m) for convenience.  </p></li><li><p>∑(k=1 to m)1 + ∑(k=0 to ⌊lg(m)⌋) 2<sup>k</sup> = m + 2<sup>1+⌊lg(m)⌋</sup> - 2<sup>0</sup> &lt; 3m?  </p><p> ∑(k=0 to ⌊lg(m)⌋) 2<sup>k</sup> = 1*(1-2<sup>lg(m) + 1</sup>)/(1-2) = 2<sup>lg(m) + 1</sup> - 1. </p><p> 2<sup>lg(m) + 1</sup> - 1  = 2*2<sup>lg(m)</sup> - 1= 2m - 1</p></li></ol><h6 id="Funny-accounting-1"><a href="#Funny-accounting-1" class="headerlink" title="Funny accounting"></a>Funny accounting</h6><p><img src="/img/AdvancedAlgorithm/5_16.jpg">  </p><h6 id="Potential-function-1"><a href="#Potential-function-1" class="headerlink" title="Potential function"></a>Potential function</h6><p><strong>φ here mean the change in the credits we have in i<sub>th</sub> push</strong><br><img src="/img/AdvancedAlgorithm/5_17.jpg"><br><img src="/img/AdvancedAlgorithm/5_18.jpg">  </p><h5 id="Example-general-case-of-m-push-pop-operations"><a href="#Example-general-case-of-m-push-pop-operations" class="headerlink" title="Example: general case of m push/pop operations"></a>Example: general case of m push/pop operations</h5><h6 id="Potential-function-2"><a href="#Potential-function-2" class="headerlink" title="Potential function"></a>Potential function</h6><p><strong>φ here mean the change in the credits we have in i<sub>th</sub> push/pop</strong><br><img src="/img/AdvancedAlgorithm/5_19.jpg"><br><img src="/img/AdvancedAlgorithm/5_20.jpg">  </p><ol><li><strong>push without expansion</strong><br><img src="/img/AdvancedAlgorithm/5_21.jpg" alt="push without expansion">  </li><li><strong>push with expansion</strong><br><img src="/img/AdvancedAlgorithm/5_22.jpg" alt="push with expansion">  </li><li><strong>pop without contraction</strong><br><img src="/img/AdvancedAlgorithm/5_23.jpg" alt="pop without contraction">  </li><li><strong>pop with contraction</strong><br><img src="/img/AdvancedAlgorithm/5_24.jpg" alt="pop with contraction">  </li></ol><h1 id="UNIVERSAL-HASHING"><a href="#UNIVERSAL-HASHING" class="headerlink" title="UNIVERSAL HASHING"></a>UNIVERSAL HASHING</h1><h2 id="Dictionary-Problem-1"><a href="#Dictionary-Problem-1" class="headerlink" title="Dictionary Problem"></a>Dictionary Problem</h2><h3 id="Problem-Definition"><a href="#Problem-Definition" class="headerlink" title="Problem Definition"></a>Problem Definition</h3><p><img src="/img/AdvancedAlgorithm/6_01.jpg" alt="definition">  </p><h3 id="Royal-Solution-Use-An-Array-Of-Size-NKEYS"><a href="#Royal-Solution-Use-An-Array-Of-Size-NKEYS" class="headerlink" title="Royal Solution: Use An Array Of Size NKEYS"></a>Royal Solution: Use An Array Of Size NKEYS</h3><h4 id="Implementation-3"><a href="#Implementation-3" class="headerlink" title="Implementation"></a>Implementation</h4><p><img src="/img/AdvancedAlgorithm/6_02.jpg" alt="royal solution">  </p><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p><img src="/img/AdvancedAlgorithm/6_03.jpg" alt="analysis"><br><strong>11.1-4</strong><br>We wish to implement a dictionary by using direct addressing on a huge array. At the start, the array entries may contain garbage, and initializing the entire array is impractical because of its size. Describe a scheme for implementing a direct- address dictionary on a huge array. Each stored object should use O(1) space; the operations SEARCH, INSERT, and DELETE should take O(1) time each; and initializing the data structure should take O(1) time. (Hint: Use an additional array, treated somewhat like a stack whose size is the number of keys actually stored in the dictionary, to help determine whether a given entry in the huge array is valid or not.)</p><h3 id="Compromise-Solution-Hash-Table"><a href="#Compromise-Solution-Hash-Table" class="headerlink" title="Compromise Solution: Hash Table"></a>Compromise Solution: Hash Table</h3><h4 id="Implementation-4"><a href="#Implementation-4" class="headerlink" title="Implementation"></a>Implementation</h4><p><img src="/img/AdvancedAlgorithm/6_04.jpg" alt="hash table"><br><a href="https://en.wikipedia.org/wiki/Quadratic_probing">Quadratic_probing</a><br><strong>Double Hashing</strong><br>Double hashing is a collision resolving technique in Open Addressed Hash tables. Double hashing uses the idea of applying a second hash function to key when a collision occurs</p><h4 id="Worst-case-Analysis"><a href="#Worst-case-Analysis" class="headerlink" title="Worst-case Analysis"></a>Worst-case Analysis</h4><p><img src="/img/AdvancedAlgorithm/6_05.jpg" alt="worst case">  </p><h4 id="Average-Case-Analysis-chain-hashing"><a href="#Average-Case-Analysis-chain-hashing" class="headerlink" title="Average-Case Analysis: chain hashing"></a>Average-Case Analysis: chain hashing</h4><p><img src="/img/AdvancedAlgorithm/6_06.jpg" alt="average case">  </p><h4 id="2-Universal-Property"><a href="#2-Universal-Property" class="headerlink" title="2-Universal Property"></a>2-Universal Property</h4><p><img src="/img/AdvancedAlgorithm/6_07.jpg" alt="2-Universal Property">   </p><h4 id="Expect-Running-Time"><a href="#Expect-Running-Time" class="headerlink" title="Expect Running Time"></a>Expect Running Time</h4><p><img src="/img/AdvancedAlgorithm/6_08.jpg" alt="Expect Running Time">  </p><h4 id="Expect-Running-Time-Of-A-SEQUENCE-Of-Hash-Operation"><a href="#Expect-Running-Time-Of-A-SEQUENCE-Of-Hash-Operation" class="headerlink" title="Expect Running Time Of A SEQUENCE Of Hash Operation"></a>Expect Running Time Of A SEQUENCE Of Hash Operation</h4><p><img src="/img/AdvancedAlgorithm/6_09.jpg" alt="Expect Running Time">  </p><h2 id="A-Universal-Hash-Function-Family"><a href="#A-Universal-Hash-Function-Family" class="headerlink" title="A Universal Hash Function Family"></a>A Universal Hash Function Family</h2><h3 id="Universal-Property"><a href="#Universal-Property" class="headerlink" title="Universal Property"></a>Universal Property</h3><p><img src="/img/AdvancedAlgorithm/6_10.jpg" alt="Big Family">  </p><h3 id="A-Much-Smaller-Family-With-Universal-Hashing-Property"><a href="#A-Much-Smaller-Family-With-Universal-Hashing-Property" class="headerlink" title="A Much Smaller Family With Universal Hashing Property"></a>A Much Smaller Family With Universal Hashing Property</h3><p><img src="/img/AdvancedAlgorithm/6_11.jpg" alt="Small Family">  </p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><p><img src="/img/AdvancedAlgorithm/6_12.jpg" alt="Small Family">  </p><h4 id="Proof-Of-Universal-Hashing-Property"><a href="#Proof-Of-Universal-Hashing-Property" class="headerlink" title="Proof Of Universal Hashing Property"></a>Proof Of Universal Hashing Property</h4><p><img src="/img/AdvancedAlgorithm/6_13.jpg" alt="Small Family">  </p><ol><li>ak<sub>1</sub>+b ≠ ak<sub>2</sub>+b<br>Same a,b. Different k, the equation is impossible same.</li><li>ak<sub>1</sub>+b ≠ ak<sub>2</sub>+b mod P<br>If ak<sub>1</sub>+b = ak<sub>2</sub>+b mod P<br>Then a(k<sub>1</sub>-k<sub>2</sub>) = 0 mod P<br>Since P is Prime, so a is 0 or k<sub>1</sub>=k<sub>2</sub>. However, a is bigger than 0, and k1 ≠ k2, So it is impossible that ak<sub>1</sub>+b = ak<sub>2</sub>+b mod P.</li><li>ak<sub>1</sub>+b = (ak<sub>2</sub>+b mod P)mod m<br>Assume ak<sub>1</sub>+b = r, ak<sub>2</sub>+b mod P = s.<br>If r = s mod m, the difference between r and s is an integer multiple m.<br>So there are p/m pairs. And since P is prime, p/m ≤ (p-1)/m. And r can be any numbr for 0 to P. So the total same pairs is p(p-1)/m.</li><li>The collision probability 1/m.<br>k<sub>1</sub> and k<sub>2</sub> has total p(p-1) pairs, so the collision probablity of each pair is p(p-1)/m/(p(p-1)) = 1/m.  </li></ol><h2 id="Perfect-Hashing"><a href="#Perfect-Hashing" class="headerlink" title="Perfect Hashing"></a>Perfect Hashing</h2><h3 id="Perfect-Definition"><a href="#Perfect-Definition" class="headerlink" title="Perfect Definition"></a>Perfect Definition</h3><p>Given n keys, a hashing function is <strong>perfect</strong> if it maps each of the key to a unique position.</p><h3 id="Markov’s-inequality"><a href="#Markov’s-inequality" class="headerlink" title="Markov’s inequality"></a>Markov’s inequality</h3><p><img src="/img/AdvancedAlgorithm/6_14.jpg" alt="Markov&#39;s Inequality">  </p><h3 id="Perfect-Hashing-using-quadratic-space"><a href="#Perfect-Hashing-using-quadratic-space" class="headerlink" title="Perfect Hashing using quadratic space"></a>Perfect Hashing using quadratic space</h3><p><img src="/img/AdvancedAlgorithm/6_15.jpg" alt="quadratic"><br><strong>Why ∑ 1/m ≤ n<sup>2</sup>/m?</strong><br>loop through all pairs (i,j) = n + (n-1) + (n-2) + … + 1 = (n+1)*n/2  </p><h3 id="Perfect-Hashing-using-linear-space"><a href="#Perfect-Hashing-using-linear-space" class="headerlink" title="Perfect Hashing using linear space"></a>Perfect Hashing using linear space</h3><p><img src="/img/AdvancedAlgorithm/6_16.jpg" alt="linear">  </p><h4 id="First-Step"><a href="#First-Step" class="headerlink" title="First Step"></a>First Step</h4><p><img src="/img/AdvancedAlgorithm/6_17.jpg" alt="first step">  </p><h4 id="Space-Analysis"><a href="#Space-Analysis" class="headerlink" title="Space Analysis"></a>Space Analysis</h4><p><img src="/img/AdvancedAlgorithm/6_18.jpg" alt="space">  </p><h1 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h1><h2 id="Extended-Dictionary-Problam"><a href="#Extended-Dictionary-Problam" class="headerlink" title="Extended Dictionary Problam"></a>Extended Dictionary Problam</h2><p><img src="/img/AdvancedAlgorithm/7_01.jpg" alt="extend dict problam">  </p><h3 id="Classical-Solution-Binary-Search-Tree"><a href="#Classical-Solution-Binary-Search-Tree" class="headerlink" title="Classical Solution: Binary Search Tree"></a>Classical Solution: Binary Search Tree</h3><h4 id="Implementation-5"><a href="#Implementation-5" class="headerlink" title="Implementation"></a>Implementation</h4><h5 id="Class-Definition"><a href="#Class-Definition" class="headerlink" title="Class Definition"></a>Class Definition</h5><p><img src="/img/AdvancedAlgorithm/7_02.jpg" alt="class">  </p><h5 id="min-amp-max-function"><a href="#min-amp-max-function" class="headerlink" title="min &amp; max function"></a>min &amp; max function</h5><p><img src="/img/AdvancedAlgorithm/7_03.jpg" alt="min&amp;max">  </p><h5 id="find-function"><a href="#find-function" class="headerlink" title="find function"></a>find function</h5><p><img src="/img/AdvancedAlgorithm/7_04.jpg" alt="find">  </p><h5 id="insert-function"><a href="#insert-function" class="headerlink" title="insert function"></a>insert function</h5><p><img src="/img/AdvancedAlgorithm/7_05.jpg" alt="insert">  </p><h5 id="delete-min-function"><a href="#delete-min-function" class="headerlink" title="delete_min function"></a>delete_min function</h5><p><img src="/img/AdvancedAlgorithm/7_06.jpg" alt="delete_min">  </p><h5 id="delete-function"><a href="#delete-function" class="headerlink" title="delete function"></a>delete function</h5><p><img src="/img/AdvancedAlgorithm/7_07.jpg" alt="delete">  </p><h5 id="predecessor-function"><a href="#predecessor-function" class="headerlink" title="predecessor function"></a>predecessor function</h5><p><img src="/img/AdvancedAlgorithm/7_08.jpg" alt="predecessor">  </p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h4><h5 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h5><p><img src="/img/AdvancedAlgorithm/7_09.jpg" alt="insert example">  </p><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p><img src="/img/AdvancedAlgorithm/7_10.jpg" alt="delete example">  </p><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>Good average-case behavior: O(lgn) per operation.<br>Worst-case behavior: Ω(h), where h is the height, which could be <strong>n</strong>.  </p><h1 id="Balanced-BST"><a href="#Balanced-BST" class="headerlink" title="Balanced BST"></a>Balanced BST</h1><ol><li>AVL trees</li><li>2-3 trees(aka red-black trees)<br>The <strong>worst-case</strong> running time of each operation is O(lgn)  </li></ol><h2 id="Basic-Operation-rotation"><a href="#Basic-Operation-rotation" class="headerlink" title="Basic Operation: rotation"></a>Basic Operation: rotation</h2><p><img src="/img/AdvancedAlgorithm/7_11.jpg" alt="rotation">  </p><h2 id="2-3-Trees"><a href="#2-3-Trees" class="headerlink" title="2-3 Trees"></a>2-3 Trees</h2><h3 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h3><p><img src="/img/AdvancedAlgorithm/7_12.jpg" alt="nodes"><br><img src="/img/AdvancedAlgorithm/7_13.jpg" alt="nodes">  </p><h4 id="Insert-1"><a href="#Insert-1" class="headerlink" title="Insert"></a>Insert</h4><h5 id="Always-Insert-At-A-Leaf"><a href="#Always-Insert-At-A-Leaf" class="headerlink" title="Always Insert At A Leaf"></a>Always Insert At A Leaf</h5><ol><li>use binary serach property to find appropriate leaf.</li><li>if leaf is a 2-node, make it a 3-node with new value.</li><li>if leaf is a 3-node, make it a 4-node and then recursively split and insert middle value into parent node.</li></ol><h5 id="Example-inserting-2-leaf"><a href="#Example-inserting-2-leaf" class="headerlink" title="Example: inserting 2-leaf"></a>Example: inserting 2-leaf</h5><p><img src="/img/AdvancedAlgorithm/7_14.jpg" alt="insert">  </p><h5 id="Example-inserting-3-leaf"><a href="#Example-inserting-3-leaf" class="headerlink" title="Example: inserting 3-leaf"></a>Example: inserting 3-leaf</h5><p><img src="/img/AdvancedAlgorithm/7_15.jpg" alt="insert">  </p><h5 id="Example-inserting-3-leaf-recursively"><a href="#Example-inserting-3-leaf-recursively" class="headerlink" title="Example: inserting 3-leaf recursively"></a>Example: inserting 3-leaf recursively</h5><p><img src="/img/AdvancedAlgorithm/7_16.jpg" alt="insert">  </p><h5 id="Example-inserting"><a href="#Example-inserting" class="headerlink" title="Example inserting"></a>Example inserting</h5><p><img src="/img/AdvancedAlgorithm/7_17.jpg" alt="insert">  </p><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><h5 id="Always-Delete-At-A-Leaf"><a href="#Always-Delete-At-A-Leaf" class="headerlink" title="Always Delete At A Leaf"></a>Always Delete At A Leaf</h5><p><img src="/img/AdvancedAlgorithm/7_18.jpg" alt="delete">  </p><h5 id="Example-delete-3-leaf"><a href="#Example-delete-3-leaf" class="headerlink" title="Example: delete 3-leaf"></a>Example: delete 3-leaf</h5><p><img src="/img/AdvancedAlgorithm/7_19.jpg" alt="delete">  </p><h5 id="Example-2-leaf-3-sibling"><a href="#Example-2-leaf-3-sibling" class="headerlink" title="Example: 2-leaf, 3-sibling"></a>Example: 2-leaf, 3-sibling</h5><p><img src="/img/AdvancedAlgorithm/7_20.jpg" alt="delete">  </p><h5 id="Example-2-leaf-2-sibling-3-parent"><a href="#Example-2-leaf-2-sibling-3-parent" class="headerlink" title="Example: 2-leaf, 2-sibling, 3-parent"></a>Example: 2-leaf, 2-sibling, 3-parent</h5><p><img src="/img/AdvancedAlgorithm/7_21.jpg" alt="delete">  </p><h5 id="Example-2-leaf-2-sibling-2-parent"><a href="#Example-2-leaf-2-sibling-2-parent" class="headerlink" title="Example: 2-leaf, 2-sibling, 2-parent"></a>Example: 2-leaf, 2-sibling, 2-parent</h5><p><img src="/img/AdvancedAlgorithm/7_22.jpg" alt="delete">  </p><h5 id="Example-deleting"><a href="#Example-deleting" class="headerlink" title="Example deleting"></a>Example deleting</h5><p><img src="/img/AdvancedAlgorithm/7_23.jpg" alt="delete"><br><img src="/img/AdvancedAlgorithm/7_24.jpg" alt="delete"><br><img src="/img/AdvancedAlgorithm/7_25.jpg" alt="delete"><br><img src="/img/AdvancedAlgorithm/7_26.jpg" alt="delete">  </p><h4 id="Other-Operation"><a href="#Other-Operation" class="headerlink" title="Other Operation"></a>Other Operation</h4><p><strong>find(), min(), max(), pred() and succ() are implemented as for regular BST.</strong></p><h2 id="Red-Black-Trees"><a href="#Red-Black-Trees" class="headerlink" title="Red-Black Trees"></a>Red-Black Trees</h2><h3 id="Red-Black-Efficient-Implementation-Of-2-3-Trees"><a href="#Red-Black-Efficient-Implementation-Of-2-3-Trees" class="headerlink" title="Red-Black: Efficient Implementation Of 2-3 Trees"></a>Red-Black: Efficient Implementation Of 2-3 Trees</h3><p><strong>Red node is just a part of Black Node</strong><br><img src="/img/AdvancedAlgorithm/7_27.jpg" alt="nodes">  </p><h2 id="Simper-Solution-And-Faster-Balanced-BST"><a href="#Simper-Solution-And-Faster-Balanced-BST" class="headerlink" title="Simper Solution And Faster Balanced BST"></a>Simper Solution And Faster Balanced BST</h2><ol><li>treap(tree + heap): a randomized BST.</li><li>splay tree: an amortized BST.</li><li>skip list: a randomized linked list.<br><a href="https://zx1314621.github.io/2021/03/30/Advanced-Algorithm/#New-solution">details</a>  </li></ol><h2 id="Splay-Trees"><a href="#Splay-Trees" class="headerlink" title="Splay Trees"></a>Splay Trees</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ol><li>A variant of BST that has worst-case running time of O(mlgn) for any sequence of m BST operations, n of which are insertions. </li><li>Each regular BST operation is followed by a <strong>splay</strong> operation, which moves the most recently accessed element to the root.</li></ol><h3 id="Splay-Operation"><a href="#Splay-Operation" class="headerlink" title="Splay Operation"></a>Splay Operation</h3><p><img src="/img/AdvancedAlgorithm/8_01.jpg" alt="splay operation">  </p><h3 id="Basic-Step"><a href="#Basic-Step" class="headerlink" title="Basic Step"></a>Basic Step</h3><h4 id="Zig"><a href="#Zig" class="headerlink" title="Zig"></a>Zig</h4><p><img src="/img/AdvancedAlgorithm/8_02.jpg" alt="Zig">  </p><h4 id="Zag"><a href="#Zag" class="headerlink" title="Zag"></a>Zag</h4><p><img src="/img/AdvancedAlgorithm/8_03.jpg" alt="Zag">  </p><h4 id="ZigZig"><a href="#ZigZig" class="headerlink" title="ZigZig"></a>ZigZig</h4><p><img src="/img/AdvancedAlgorithm/8_04.jpg" alt="ZigZig">  </p><h4 id="ZagZag"><a href="#ZagZag" class="headerlink" title="ZagZag"></a>ZagZag</h4><p><img src="/img/AdvancedAlgorithm/8_05.jpg" alt="ZagZag">  </p><h4 id="ZigZag"><a href="#ZigZag" class="headerlink" title="ZigZag"></a>ZigZag</h4><p><img src="/img/AdvancedAlgorithm/8_06.jpg" alt="ZigZag">  </p><h4 id="ZagZig"><a href="#ZagZig" class="headerlink" title="ZagZig"></a>ZagZig</h4><p><img src="/img/AdvancedAlgorithm/8_07.jpg" alt="ZagZig">  </p><h3 id="Example-Insertion"><a href="#Example-Insertion" class="headerlink" title="Example: Insertion"></a>Example: Insertion</h3><p><img src="/img/AdvancedAlgorithm/8_08.jpg" alt="insert"><br><img src="/img/AdvancedAlgorithm/8_09.jpg" alt="insert"><br><img src="/img/AdvancedAlgorithm/8_10.jpg" alt="insert"><br><img src="/img/AdvancedAlgorithm/8_11.jpg" alt="insert">  </p><h3 id="Example-Deletion"><a href="#Example-Deletion" class="headerlink" title="Example: Deletion"></a>Example: Deletion</h3><p><img src="/img/AdvancedAlgorithm/8_12.jpg" alt="delete"><br><img src="/img/AdvancedAlgorithm/8_13.jpg" alt="delete"><br><img src="/img/AdvancedAlgorithm/8_14.jpg" alt="delete"><br><img src="/img/AdvancedAlgorithm/8_15.jpg" alt="delete">  </p><h3 id="Normal-Analysis"><a href="#Normal-Analysis" class="headerlink" title="Normal Analysis"></a>Normal Analysis</h3><p><img src="/img/AdvancedAlgorithm/8_16.jpg" alt="analysis">  </p><h3 id="Amortized-Analysis-3"><a href="#Amortized-Analysis-3" class="headerlink" title="Amortized Analysis"></a>Amortized Analysis</h3><p><img src="/img/AdvancedAlgorithm/8_17.jpg" alt="analysis">  </p><h4 id="Amortized-Cost-Of-A-Splay-Operation-Is-At-Most-1-3lg-n"><a href="#Amortized-Cost-Of-A-Splay-Operation-Is-At-Most-1-3lg-n" class="headerlink" title="Amortized Cost Of A Splay Operation Is At Most 1 + 3lg(n)"></a>Amortized Cost Of A Splay Operation Is At Most 1 + 3lg(n)</h4><h5 id="Concave-Functions"><a href="#Concave-Functions" class="headerlink" title="Concave Functions"></a>Concave Functions</h5><p><img src="/img/AdvancedAlgorithm/8_18.jpg" alt="concave functions">  </p><h5 id="lg-x-lg-y-≤-2lg-x-y-2"><a href="#lg-x-lg-y-≤-2lg-x-y-2" class="headerlink" title="lg(x) + lg(y) ≤ 2lg((x+y)/2)"></a>lg(x) + lg(y) ≤ 2lg((x+y)/2)</h5><p>(lg(x)+lg(y))/2 ≤ lg((x+y)/2)<br><img src="/img/AdvancedAlgorithm/8_19.jpg" alt="lg(n)">  </p><h5 id="Potential-Function"><a href="#Potential-Function" class="headerlink" title="Potential Function"></a>Potential Function</h5><p><img src="/img/AdvancedAlgorithm/8_20.jpg" alt="potential">  </p><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h5><p><img src="/img/AdvancedAlgorithm/8_21.jpg" alt="example">  </p><h5 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h5><p><img src="/img/AdvancedAlgorithm/8_22.jpg" alt="plan">  </p><h6 id="Notation"><a href="#Notation" class="headerlink" title="Notation"></a>Notation</h6><p><img src="/img/AdvancedAlgorithm/8_23.jpg" alt="notation">  </p><h6 id="Zag-and-Zig"><a href="#Zag-and-Zig" class="headerlink" title="Zag and Zig"></a>Zag and Zig</h6><p>C’<sub>zig(x)</sub> = C’<sub>zag(x)</sub> ≤ 1 + r’(x) - r(x)<br><img src="/img/AdvancedAlgorithm/8_24.jpg" alt="zag&amp;zig"><br><strong>actual cost = rotation times</strong>  </p><h6 id="Zigzag-and-Zagzig"><a href="#Zigzag-and-Zagzig" class="headerlink" title="Zigzag and Zagzig"></a>Zigzag and Zagzig</h6><p>C’<sub>zigzag(x)</sub> = C’<sub>zagzig(x)</sub> ≤ 2(r’(x) - r(x))<br><img src="/img/AdvancedAlgorithm/8_25.jpg" alt="zigzag">  </p><h6 id="Zigzig-and-Zagzag"><a href="#Zigzig-and-Zagzag" class="headerlink" title="Zigzig and Zagzag"></a>Zigzig and Zagzag</h6><p>C’<sub>zagzag(x)</sub> = C’<sub>zigzig(x)</sub> ≤ 3(r’(x) - r(x))<br><img src="/img/AdvancedAlgorithm/8_26.jpg" alt="zigzig">  </p><h6 id="Total-Amortized-Cost"><a href="#Total-Amortized-Cost" class="headerlink" title="Total Amortized Cost"></a>Total Amortized Cost</h6><p><img src="/img/AdvancedAlgorithm/8_27.jpg" alt="amortized cost">  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt; Take notes for the advanced algorithm and write down the knowledge points in each chapter  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Software management</title>
    <link href="http://example.com/2021/03/29/Software-management/"/>
    <id>http://example.com/2021/03/29/Software-management/</id>
    <published>2021-03-30T03:00:10.000Z</published>
    <updated>2021-04-21T18:00:18.899Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Introduction</strong> Take notes for the software management and write down the knowledge points in each chapter  </p><a id="more"></a><h1 id="Software-Management"><a href="#Software-Management" class="headerlink" title="Software Management"></a>Software Management</h1><h2 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h2><p><strong>Engineering Problem</strong><br><img src="/img/SoftwareManagement/1_01.jpg"><br><img src="/img/SoftwareManagement/1_02.jpg"><br><strong>Software Management Process</strong><br><img src="/img/SoftwareManagement/1_03.jpg"><br><img src="/img/SoftwareManagement/1_04.jpg">  </p><h2 id="Lecture-2"><a href="#Lecture-2" class="headerlink" title="Lecture 2"></a>Lecture 2</h2><h3 id="Key-to-software-management"><a href="#Key-to-software-management" class="headerlink" title="Key to software management"></a>Key to software management</h3><p><img src="/img/SoftwareManagement/2_01.jpg">  </p><h3 id="How-design-a-software-managment"><a href="#How-design-a-software-managment" class="headerlink" title="How design a software managment"></a>How design a software managment</h3><p><img src="/img/SoftwareManagement/2_02.jpg">  </p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><img src="/img/SoftwareManagement/2_03.jpg">  </p><h3 id="SPQR"><a href="#SPQR" class="headerlink" title="SPQR"></a>SPQR</h3><p>Secure + Product + Quality + Resource<br><strong>One change, all Change</strong></p><h3 id="Success-Formula"><a href="#Success-Formula" class="headerlink" title="Success Formula"></a>Success Formula</h3><p>Success = f<sub>n</sub>(S,Q,F,OI)</p><h3 id="Decomposition"><a href="#Decomposition" class="headerlink" title="Decomposition"></a>Decomposition</h3><p><img src="/img/SoftwareManagement/2_04.jpg"><br><img src="/img/SoftwareManagement/2_05.jpg">  </p><h3 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h3><p><img src="/img/SoftwareManagement/2_06.jpg">  </p><h3 id="Software-Analysis"><a href="#Software-Analysis" class="headerlink" title="Software Analysis"></a>Software Analysis</h3><p><img src="/img/SoftwareManagement/2_07.jpg"><br><img src="/img/SoftwareManagement/2_08.jpg">  </p><h2 id="Lecture-3"><a href="#Lecture-3" class="headerlink" title="Lecture 3"></a>Lecture 3</h2><p><strong>note</strong><br>unit case is necessary, it is a very very big deal.</p><h3 id="Seven-Phases-Of-Software-Development"><a href="#Seven-Phases-Of-Software-Development" class="headerlink" title="Seven Phases Of Software Development"></a>Seven Phases Of Software Development</h3><p><img src="/img/SoftwareManagement/3_01.jpg"><br><img src="/img/SoftwareManagement/3_02.jpg"><br><img src="/img/SoftwareManagement/3_03.jpg"><br><img src="/img/SoftwareManagement/3_04.jpg"><br><img src="/img/SoftwareManagement/3_05.jpg"><br><img src="/img/SoftwareManagement/3_06.jpg"><br><img src="/img/SoftwareManagement/3_07.jpg"><br><strong>seven phases</strong><br>release</p><h3 id="Popular-Development-Mode"><a href="#Popular-Development-Mode" class="headerlink" title="Popular Development Mode"></a>Popular Development Mode</h3><p><img src="/img/SoftwareManagement/3_08.jpg">  </p><h3 id="How-to-write-product-requirement"><a href="#How-to-write-product-requirement" class="headerlink" title="How to write product requirement"></a>How to write product requirement</h3><p><strong>note</strong><br>when you know requirement, you know test cases<br><img src="/img/SoftwareManagement/3_09.jpg"><br><img src="/img/SoftwareManagement/3_10.jpg"><br><img src="/img/SoftwareManagement/3_11.jpg">  </p><h2 id="Lecture-4"><a href="#Lecture-4" class="headerlink" title="Lecture 4"></a>Lecture 4</h2><h3 id="Engineers-should-think-from-the-user’s-point-of-view"><a href="#Engineers-should-think-from-the-user’s-point-of-view" class="headerlink" title="Engineers should think from the user’s point of view"></a>Engineers should think from the user’s point of view</h3><p><img src="/img/SoftwareManagement/4_01.jpg">  </p><h4 id="Can-be-gained-in-following-ways"><a href="#Can-be-gained-in-following-ways" class="headerlink" title="Can be gained in following ways"></a>Can be gained in following ways</h4><p><img src="/img/SoftwareManagement/4_02.jpg">  </p><h3 id="Relationship-between-PM-and-Engineer"><a href="#Relationship-between-PM-and-Engineer" class="headerlink" title="Relationship between PM and Engineer"></a>Relationship between PM and Engineer</h3><p><img src="/img/SoftwareManagement/4_03.jpg">  </p><h3 id="Conflict-between-PM-and-Engineer"><a href="#Conflict-between-PM-and-Engineer" class="headerlink" title="Conflict between PM and Engineer"></a>Conflict between PM and Engineer</h3><h4 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h4><p>A major conflict between Engineering and Product Management will in many cases exist and have the most deleterious effect on the Project.</p><h4 id="Resolve-Conflict"><a href="#Resolve-Conflict" class="headerlink" title="Resolve Conflict"></a>Resolve Conflict</h4><ol><li>Determine the stage the company and product is as a whole<br>Stage 1: Startup<br>Stage 2: Operational Excellence<br>Stage 3: Market Driven<br>Stage 4: Finance Driven  </li><li>Determine who owns the customer facing requirements and who owns the technical and derived requirements.</li><li>Determine who owns:<br>a. Cost<br>b. Schedule<br>c. Quality<br>d. Functionality  </li><li>Validate performance requirements.  </li></ol><h4 id="Method-For-Analysis"><a href="#Method-For-Analysis" class="headerlink" title="Method For Analysis"></a>Method For Analysis</h4><p>Step 1. Draw a Context Diagram<br>a. draw a circle, inside is the system, outside is the environment<br>b. outside the circle draw the inputs, outputs, source and destination  </p><p>Step 2. Identify the high level functions to be performed or behavior to be exhibited.  </p><p>Step 3. Identify the flow of data between these functions. </p><p>Step 4. Define the major data entities named on the context chart and the high level functions.  </p><p>Step 5. Identify the quality requirements:  </p><ol><li>Response Time  </li><li>System Availability  </li><li>Throughput Capacity  </li><li>Security Requirements  </li><li>Integrity  </li><li>Auditability  </li><li>Disaster Recovery  </li><li>Resource Load  </li></ol><p>Step 6. Arrive at a preliminary cost and schedule estimates  </p><p>Step 7. How does this new system or enhancement fit into the organization’s strategic plan?  </p><h4 id="Context-Diagram"><a href="#Context-Diagram" class="headerlink" title="Context Diagram"></a>Context Diagram</h4><ol><li>the single most important piece of documentation for the project is the <strong>Context Diagram</strong>  </li><li>Its purpose is to show the scope of the project  </li><li>The Context Diagram is made up of one bubble with the name of the System inside  </li><li>It shows all the inputs and all the outputs.</li><li>The Context Diagram is an important product of the requirements specification step for it presents to all interested parties a view of the system that can be understood and agreed to.</li></ol><h4 id="Product-Requirements-Document"><a href="#Product-Requirements-Document" class="headerlink" title="Product Requirements Document"></a>Product Requirements Document</h4><ol><li>The most important document in the entire development process.</li><li>It serves as a contract between Engineering and Product Management.</li><li>It is the key transition in the entire development process.</li><li>The software project manager must ensure that this document is developed, reviewed and approved in a timely manner.</li></ol><h5 id="Who-should-create-this-document"><a href="#Who-should-create-this-document" class="headerlink" title="Who should create this document?"></a>Who should create this document?</h5><ol><li>Primary Responsibility: Product Mgr</li><li>Secondary Responsibility: Software Engr,Test Engr</li></ol><h5 id="Why-do-you-need-a-detailed-PRD"><a href="#Why-do-you-need-a-detailed-PRD" class="headerlink" title="Why do you need a detailed PRD?"></a>Why do you need a detailed PRD?</h5><ol><li>preliminary acceptance/rejection </li><li>vehicle for communication</li><li>feasibility</li><li>management OK/constraint</li></ol><h5 id="PRD"><a href="#PRD" class="headerlink" title="PRD"></a>PRD</h5><p><img src="/img/SoftwareManagement/4_04.jpg">  </p><h4 id="Requirements-Management"><a href="#Requirements-Management" class="headerlink" title="Requirements Management"></a>Requirements Management</h4><p><img src="/img/SoftwareManagement/4_05.jpg">  </p><h3 id="How-to-Plan-a-Project"><a href="#How-to-Plan-a-Project" class="headerlink" title="How to Plan a Project"></a>How to Plan a Project</h3><p><img src="/img/SoftwareManagement/4_06.jpg">  </p><h4 id="Initial-Estimate"><a href="#Initial-Estimate" class="headerlink" title="Initial Estimate"></a>Initial Estimate</h4><p>Although it is most uncertain, the initial estimate is, in many ways, the most important. It occurs at such an early state (after the MRD) that the temptation is strong to ignore it; to do so is a mistake. Making the initial estimate has the welcome side effect of leading the manager to consider the various factors bearing on the size and complexity of the development task. The initial estimate seeds the estimation process, serving as a reference value with which to compare later estimates.</p><h4 id="Scheduling-and-Costing"><a href="#Scheduling-and-Costing" class="headerlink" title="Scheduling and Costing"></a>Scheduling and Costing</h4><p>Scheduling and Costing will continue throughout the life of the project:</p><ol><li>Preliminary high level schedules and costs based on the MRD 2. Detailed schedules and costs based on the detailed analysis and product specifications</li><li>Revised schedules and costs based on the work being accomplished<h5 id="Scheduling-Steps"><a href="#Scheduling-Steps" class="headerlink" title="Scheduling Steps"></a>Scheduling Steps</h5></li><li>Assign Engineers to the tasks</li><li>Assign duration to tasks</li><li>Determine which function needs to be done in what order</li><li>Layout the end to end schedule</li><li>Go through several cycles of:<br>a. Looking at the task that represents the critical path<br>b. Move resources or tasks to reduce the critical path</li></ol><h4 id="Organizational-Alignment"><a href="#Organizational-Alignment" class="headerlink" title="Organizational Alignment"></a>Organizational Alignment</h4><p>Before the project begins you should have the following in place:  </p><ol><li>High level product functionality  </li><li>Decomposed tasks list (based on process)  </li><li>Delivery date and some rough milestone dates  </li><li>High resource allocation to tasks  </li><li>Defined roles, responsibilities and expectations  </li><li>Physical resources</li></ol><h5 id="How-would-the-following-scenarios-affect-the-development-process"><a href="#How-would-the-following-scenarios-affect-the-development-process" class="headerlink" title="How would the following scenarios affect the development process?"></a>How would the following scenarios affect the development process?</h5><ol><li>Time-to-Market  </li><li>Developing a Market  </li><li>Research and Development  </li><li>Establishing Market Leadership 5. Establishing a Product Family  </li></ol><h5 id="How-would-the-software-engineering-team’s-background-and-environment-affect-the-project"><a href="#How-would-the-software-engineering-team’s-background-and-environment-affect-the-project" class="headerlink" title="How would the software engineering team’s background and environment affect the project:"></a>How would the software engineering team’s background and environment affect the project:</h5><ol><li>Complex, new technology  </li><li>Straightforward and known technology  </li><li>Somewhere in the middle  </li></ol><h4 id="Software-Project-Plan"><a href="#Software-Project-Plan" class="headerlink" title="Software Project Plan"></a>Software Project Plan</h4><h5 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h5><p>Describe or reference the specific mechanisms and subordinate plans to complete the development project to include schedules, responsibilities, methodologies, tools testing, guidelines. The plan clearly states the reporting mechanisms and quality goals. It is an Organizational Level Plan not to be confused with the lower level detail project plan  </p><h5 id="Points"><a href="#Points" class="headerlink" title="Points"></a>Points</h5><ol><li>A detailed plan cannot be created until AFTER the detailed requirements have been refined, reviewed and approved.</li><li>A high level plan (using the template) based on organizational practices, prior project histories and the MRD CAN be created.</li><li>This high level plan will be REFINED (just as the MRD is refined into a Detailed Requirements Specification) and reviewed for approval purposes.</li></ol><h5 id="Software-Project-Plan-Template"><a href="#Software-Project-Plan-Template" class="headerlink" title="Software Project Plan Template"></a>Software Project Plan Template</h5><ol><li><p>System Overview. Briefly state the purpose of the system and its major<br>components</p></li><li><p>Product and Project Deliverables</p></li><li><p>MajorActivityScheduleAndMilestones<br>a. Whendoesitstart<br>b. When does it end<br>c. What does it produce<br>d. Sequential relationship to other activities  </p></li><li><p>Resources<br>a. Hardware b. Software c. Facilities</p></li><li><p>Risks<br>a. Whatarethey<br>b. How will you monitor them<br>c. What will you do if they occur  </p></li><li><p>Statusing Method</p></li><li><p>Software Engineering<br>a. ProjectOrganizationalStructure<br>b. Personnel and their RR&amp;E<br>c. Design and Coding Standards<br>d. Development Techniques And Methodologies Used In<br> <strong>S/WRequirementsAnalysis</strong><br> <strong>Preliminary Design</strong><br> <strong>Detailed Design</strong><br> <strong>Coding</strong><br>e. Reviews  </p></li><li><p>SoftwareTesting<br> a. OrganizationalStructure<br> b. Personnel and their RR&amp;E<br> c. TestApproach<br> d. TestPlanningAndConstraints  </p></li><li><p>Software Configuration Management and Release<br> a. Organizational Structure<br> b. Personnel<br> c. Configuration Control  </p><ol><li>Flow Of Configuration Control  </li><li>Reporting Documentation  </li><li>Review Procedures  </li><li>Status Accounting  </li></ol></li></ol><p>At this stage you should have (or performed) the following<br>a. A baselined Product Specification (Marketing)<br>Third Party Software (and costs)<br>Preliminary costs and schedules<br>A go / no-go decision<br>b. A baselined Software Requirements Specification<br>Detailed development plan<br>Detailed estimated costs for:<br>    Engineering Test Documentation</p><h5 id="The-Nine-Deadly-Sins-of-Project-Planning"><a href="#The-Nine-Deadly-Sins-of-Project-Planning" class="headerlink" title="The Nine Deadly Sins of Project Planning"></a>The Nine Deadly Sins of Project Planning</h5><ol><li>Not planning at all.</li><li>Not planning for all project activities. </li><li>Failure to plan for risk</li><li>Using the same plan for every project </li><li>Using a prepackaged plan</li><li>Allowing a plan to diverge from reality </li><li>Planning too much too soon</li><li>Planning to catch up later</li><li>Not learning from past planning sins.</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt; Take notes for the software management and write down the knowledge points in each chapter  &lt;/p&gt;</summary>
    
    
    
    
    <category term="SCU, Campus" scheme="http://example.com/tags/SCU-Campus/"/>
    
  </entry>
  
  <entry>
    <title>ObjOrientAnalysisDesProg</title>
    <link href="http://example.com/2021/01/14/ObjOrientAnalysisDesProg/"/>
    <id>http://example.com/2021/01/14/ObjOrientAnalysisDesProg/</id>
    <published>2021-01-14T23:39:20.000Z</published>
    <updated>2021-01-15T00:22:57.668Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Introduction</strong> Take notes for the Obj Orient Analysis Des Prog and write down the knowledge points in each chapter  </p><a id="more"></a><h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><h2 id="Use-case"><a href="#Use-case" class="headerlink" title="Use case"></a>Use case</h2><h3 id="The-relationship-in-use-case-diagram"><a href="#The-relationship-in-use-case-diagram" class="headerlink" title="The relationship in use case diagram"></a>The relationship in use case diagram</h3><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p><img src="/img/Obj/01.jpg" alt="Instruction"><br>a case include another case</p><h4 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h4><p><img src="/img/Obj/02.jpg" alt="Instruction"><br>the case is optional<br>it will be excuated under some requirement</p><h4 id="generalization-泛化"><a href="#generalization-泛化" class="headerlink" title="generalization(泛化)"></a>generalization(泛化)</h4><p><img src="/img/Obj/03.jpg" alt="Instruction"><br>fater case and son case</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt; Take notes for the Obj Orient Analysis Des Prog and write down the knowledge points in each chapter  &lt;/p&gt;</summary>
    
    
    
    
    <category term="SCU, Campus" scheme="http://example.com/tags/SCU-Campus/"/>
    
  </entry>
  
  <entry>
    <title>MobileDevelopment</title>
    <link href="http://example.com/2020/10/21/MobileDevelopment/"/>
    <id>http://example.com/2020/10/21/MobileDevelopment/</id>
    <published>2020-10-21T15:17:35.000Z</published>
    <updated>2020-10-28T23:05:33.703Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Introduction</strong> This note will be used to keep track of all the knowledge gained during Android development  </p><h1 id="Development-Component"><a href="#Development-Component" class="headerlink" title="Development Component"></a>Development Component</h1><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="Step-1-Create-Service-class-whihc-extends-Service"><a href="#Step-1-Create-Service-class-whihc-extends-Service" class="headerlink" title="Step 1: Create Service class whihc extends Service"></a>Step 1: Create Service class whihc extends Service</h3><p><img src="/img/Mobile/02.jpg" alt="Instruction">  </p><h3 id="Step-2-Start-amp-stop-service"><a href="#Step-2-Start-amp-stop-service" class="headerlink" title="Step 2: Start &amp; stop service"></a>Step 2: Start &amp; stop service</h3><p>普通的Service的生命周期很简单，分别为onCreate、onStartCommand、onDestroy这三个。当我们startService()的时候，首次创建Service会回调onCreate()方法，然后回调onStartCommand()方法，再次startService()的时候，就只会执行onStartCommand()。服务一旦开启后，我们就需要通过stopService()方法或者stopSelf()方法关闭服务，这时就会回调onDestroy()</p><p><strong>MainActivity.class</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; start</span><br><span class="line">Intent sIntent &#x3D; new Intent(this, Myservice.class)</span><br><span class="line">startService(sIntent)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; stop</span><br><span class="line">stopService(sIntent)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>MyService.class</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; startService would invoke onStartCommand method in MyService class</span><br><span class="line">&#x2F;&#x2F; In general, this method would create sub-thread to running service</span><br><span class="line">public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">Runnable runnable &#x3D; new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">Log.i(TAG, &quot;generate random number running&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Thread thread &#x3D; new Thread(runnable);</span><br><span class="line">&#x2F;&#x2F; execute linearly not multi-thread, would stoke program</span><br><span class="line">&#x2F;&#x2F; thread.run();</span><br><span class="line">&#x2F;&#x2F; achieve multi-thread</span><br><span class="line">thread.start();</span><br><span class="line">&#x2F;*</span><br><span class="line">START_STICKY: automatically restart after being killed and calls onStartCommand again, it can accept the new task instead of continuing with the previous task</span><br><span class="line">START_NOT_STICKY: Do not restart after being killed, do not keep the startup state, can stop at any time</span><br><span class="line">START_REDELIVER_INTENT: If there is an unfinished Intent, it is restarted after being killed, and all intents are sent after the restart. After stopSelf releases the maintained Intent.</span><br><span class="line">*&#x2F;</span><br><span class="line">return START_NOT_STICKY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; stopService</span><br><span class="line">public void onDestroy() &#123;</span><br><span class="line">super.onDestroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Step-3-Bind-amp-Unbind-service"><a href="#Step-3-Bind-amp-Unbind-service" class="headerlink" title="Step 3: Bind &amp; Unbind service"></a>Step 3: Bind &amp; Unbind service</h3><p><strong>MainActivity.class</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; bind</span><br><span class="line">private void bindMyService() &#123;</span><br><span class="line">if (myServiceConnection &#x3D;&#x3D; null) &#123;</span><br><span class="line">myServiceConnection &#x3D; new ServiceConnection() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void onServiceConnected(ComponentName componentName, IBinder iBinder) &#123;</span><br><span class="line">Log.i(TAG, &quot;onServiceConnected&quot;);</span><br><span class="line">MyService.MyBinder binder &#x3D; (MyService.MyBinder) iBinder;myService &#x3D; ((MyService.MyBinder) iBinder).getService();                 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onServiceDisconnected(ComponentName componentName) &#123;</span><br><span class="line">Log.i(TAG, &quot;onServiceDisconnected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Intent, new Service Connection</span><br><span class="line">&#x2F;&#x2F; BIND_AUTO_CREATE: check if there are connections before stoping services</span><br><span class="line"></span><br><span class="line">bindService(sIntent, myServiceConnection, BIND_AUTO_CREATE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; unbind</span><br><span class="line">private void unbindMyService() &#123;</span><br><span class="line">unbindService(myServiceConnection);</span><br><span class="line">myServiceConnection &#x3D; null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MyService.class</strong></p><p><strong>bind</strong><br>Define Binder class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class MyBinder extends Binder &#123;</span><br><span class="line">        public MyService getService() &#123;</span><br><span class="line">            return MyService.this;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Define MyBinder instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private Binder myBinder &#x3D; new MyBinder();</span><br></pre></td></tr></table></figure><p>Define onBind Method return binder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">&#x2F;&#x2F; you can get this binder in creating serviceConnection in MainActivity.class</span><br><span class="line">public IBinder onBind(Intent intent) &#123;</span><br><span class="line">return myBinder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Unbind</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void unbindService(ServiceConnection conn) &#123;</span><br><span class="line">super.unbindService(conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/zx1314621/Service_Demo">Demo</a> </p><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><h3 id="Define-Item-in-the-listview"><a href="#Define-Item-in-the-listview" class="headerlink" title="Define Item in the listview"></a>Define Item in the listview</h3><p>define attribute of every row</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Item &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int img_url;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Item(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int getImg_url() &#123;</span><br><span class="line">        return img_url;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void setImg_url(int img_url) &#123;</span><br><span class="line">        this.img_url &#x3D; img_url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Define-xml-in-each-item"><a href="#Define-xml-in-each-item" class="headerlink" title="Define xml in each item"></a>Define xml in each item</h3><p>show in each row</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;item_image&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;130dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;130dp&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;item_name&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:textStyle&#x3D;&quot;bold&quot;</span><br><span class="line">        android:textColor&#x3D;&quot;#0000EE&quot;</span><br><span class="line">        android:layout_marginLeft&#x3D;&quot;10dp&quot;</span><br><span class="line">        android:layout_marginTop&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:textSize&#x3D;&quot;25sp&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="Define-Adapter"><a href="#Define-Adapter" class="headerlink" title="Define Adapter"></a>Define Adapter</h3><p>Connect the <strong>background data</strong> to <strong>the foreground style</strong>   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class ItemAdapter extends ArrayAdapter&lt;Item&gt; &#123;</span><br><span class="line">    private int resourceId;</span><br><span class="line">    public ItemAdapter(Context context,int textViewResourceId, List&lt;Item&gt; objects)&#123;</span><br><span class="line">        super(context, textViewResourceId, objects);</span><br><span class="line">        resourceId &#x3D; textViewResourceId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public View getView(int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line">        Item item &#x3D; getItem(position);</span><br><span class="line">        View view;</span><br><span class="line">        ViewHolder viewHolder;</span><br><span class="line"></span><br><span class="line">        if (convertView &#x3D;&#x3D; null)&#123;</span><br><span class="line">            view &#x3D; LayoutInflater.from(getContext()).inflate(resourceId, null);</span><br><span class="line"></span><br><span class="line">            viewHolder &#x3D; new ViewHolder();</span><br><span class="line">            viewHolder.itemImage &#x3D; (ImageView) view.findViewById(R.id.item_image);</span><br><span class="line">            viewHolder.itemName &#x3D; (TextView) view.findViewById(R.id.item_name);</span><br><span class="line"></span><br><span class="line">            view.setTag(viewHolder);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            view &#x3D; convertView;</span><br><span class="line">            viewHolder &#x3D; (ViewHolder) view.getTag();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        viewHolder.itemImage.setImageResource(item.getImg_url());</span><br><span class="line">        viewHolder.itemName.setText(item.getName());</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class ViewHolder&#123;</span><br><span class="line">        ImageView itemImage;</span><br><span class="line">        TextView itemName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MainActivity-Omit-definition-MainActivity-XML"><a href="#MainActivity-Omit-definition-MainActivity-XML" class="headerlink" title="MainActivity(Omit definition MainActivity.XML)"></a>MainActivity(Omit definition MainActivity.XML)</h3><p>set Data and click listener</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#x2F;&#x2F; define data source</span><br><span class="line">List&lt;Item&gt; itemList &#x3D; new ArrayList&lt;Item&gt;();</span><br><span class="line">Item alpha &#x3D; new Item(&quot;Alpha&quot;,R.drawable.alpha, &quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Alpha&quot;,&quot;API 1&quot;);</span><br><span class="line">        itemList.add(alpha);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; add and set adapter</span><br><span class="line">ItemAdapter adapter &#x3D; new ItemAdapter(MainActivity.this,R.layout.item, itemList);</span><br><span class="line"></span><br><span class="line">       ListView listView &#x3D; (ListView) findViewById(R.id.list_view);</span><br><span class="line">       listView.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; add click listener</span><br><span class="line">        listView.setOnItemClickListener(new AdapterView.OnItemClickListener()&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onItemClick(AdapterView&lt;?&gt; parent, View view,</span><br><span class="line">                                    int position, long id) &#123;</span><br><span class="line">                &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">                Item info &#x3D; itemList.get(position);</span><br><span class="line">                Bundle bundle &#x3D; new Bundle();</span><br><span class="line"></span><br><span class="line">                bundle.putString(&quot;itemName&quot;, info.getName());</span><br><span class="line">                bundle.putString(&quot;itemImage&quot;, info.getImg_url() + &quot;&quot;);</span><br><span class="line">                bundle.putString(&quot;itemLink&quot;, info.getLink());</span><br><span class="line"></span><br><span class="line">                Intent intent &#x3D; new Intent(MainActivity.this,ItemPage.class);</span><br><span class="line">                intent.putExtras(bundle);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="ToolBar"><a href="#ToolBar" class="headerlink" title="ToolBar"></a>ToolBar</h2><h3 id="Hide-actionbar-to-show-toolbar"><a href="#Hide-actionbar-to-show-toolbar" class="headerlink" title="Hide actionbar to show toolbar"></a>Hide actionbar to show toolbar</h3><p>Change theme of this activity in AndroidManifest.xml, and this theme is define in styles.xml  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; AndroidManifest.xml</span><br><span class="line">      &lt;activity android:name&#x3D;&quot;.activity_name&quot;</span><br><span class="line">          android:theme&#x3D;&quot;@style&#x2F;AppTheme.NoActionBar&quot;</span><br><span class="line">          &gt;&lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; styles.xml</span><br><span class="line"> &lt;style name&#x3D;&quot;AppTheme.NoActionBar&quot;&gt;  </span><br><span class="line">        &lt;item name&#x3D;&quot;windowNoTitle&quot;&gt;true&lt;&#x2F;item&gt;  </span><br><span class="line">        &lt;item name&#x3D;&quot;windowActionBar&quot;&gt;false&lt;&#x2F;item&gt;  </span><br><span class="line">    &lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="Define-XML"><a href="#Define-XML" class="headerlink" title="Define XML"></a>Define XML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; there is a back button in ToolBar</span><br><span class="line">    &lt;androidx.appcompat.widget.Toolbar</span><br><span class="line">        android:theme&#x3D;&quot;@style&#x2F;ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class="line">        android:background&#x3D;&quot;?colorPrimary&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;?actionBarSize&quot;</span><br><span class="line">        android:minHeight&#x3D;&quot;?actionBarSize&quot;</span><br><span class="line">        app:popupTheme&#x3D;&quot;?actionBarPopupTheme&quot;</span><br><span class="line">        app:navigationIcon&#x3D;&quot;?homeAsUpIndicator&quot;</span><br><span class="line">        xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">mToolbar &#x3D; (androidx.appcompat.widget.Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">&#x2F;&#x2F; set support to this toolbar</span><br><span class="line">        setSupportActionBar((Toolbar) mToolbar);</span><br><span class="line">        &#x2F;&#x2F; set click listener</span><br><span class="line">        ((Toolbar) mToolbar).setNavigationOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><h3 id="Define-XML-1"><a href="#Define-XML-1" class="headerlink" title="Define XML"></a>Define XML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;WebView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;web_view&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="open-permission-in-AndroidManifest-xml"><a href="#open-permission-in-AndroidManifest-xml" class="headerlink" title="open permission in AndroidManifest.xml"></a>open permission in AndroidManifest.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.INTERNET&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="MainActivity-1"><a href="#MainActivity-1" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">webView &#x3D; (WebView) findViewById(R.id.web_view);</span><br><span class="line">      webView.getSettings().setJavaScriptEnabled(true);</span><br><span class="line">      webView.loadUrl(link);</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      &#x2F;&#x2F; not jump to external browser</span><br><span class="line">      webView.setWebViewClient(new WebViewClient()&#123;</span><br><span class="line">          @Override</span><br><span class="line">          public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;</span><br><span class="line">              view.loadUrl(url);</span><br><span class="line">              return super.shouldOverrideUrlLoading(view, url);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p><strong>post</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; add attribute</span><br><span class="line">Bundle bundle &#x3D; new Bundle();</span><br><span class="line"></span><br><span class="line">            bundle.putString(&quot;itemName&quot;, info.getName());</span><br><span class="line">            bundle.putString(&quot;itemImage&quot;, info.getImg_url() + &quot;&quot;);</span><br><span class="line">            bundle.putString(&quot;itemLink&quot;, info.getLink());</span><br><span class="line"></span><br><span class="line">            Intent intent &#x3D; new Intent(MainActivity.this,ItemPage.class);</span><br><span class="line">            &#x2F;&#x2F; first way post</span><br><span class="line">            &#x2F;&#x2F; intent.putExtra(&quot;itemLink&quot;,info.getLink());</span><br><span class="line">            &#x2F;&#x2F; second way post</span><br><span class="line">            intent.putExtras(bundle);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            &#x2F;&#x2F; if finish() cannot back again</span><br><span class="line">            &#x2F;&#x2F; finish();</span><br></pre></td></tr></table></figure><p><strong>get</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; first way get</span><br><span class="line">&#x2F;&#x2F; getIntent().getStringExtra(&quot;link&quot;);</span><br><span class="line">&#x2F;&#x2F; second way get</span><br><span class="line"> Bundle b&#x3D;getIntent().getExtras();</span><br><span class="line">      &#x2F;&#x2F;获取Bundle的信息</span><br><span class="line">      String link &#x3D; b.getString(&quot;itemLink&quot;);</span><br></pre></td></tr></table></figure><h2 id="Version-Problem-between-AndroidX-and-android-support-v7-XXX"><a href="#Version-Problem-between-AndroidX-and-android-support-v7-XXX" class="headerlink" title="Version Problem between AndroidX and android.support.v7.XXX"></a>Version Problem between AndroidX and android.support.v7.XXX</h2><p><a href="https://blog.csdn.net/u011041494/article/details/93849730">CSDN Version Control</a> </p><h2 id="Android-Studio-emulator-rotate-screen-portrait-amp-landsacpe"><a href="#Android-Studio-emulator-rotate-screen-portrait-amp-landsacpe" class="headerlink" title="Android Studio emulator rotate screen(portrait &amp; landsacpe)"></a>Android Studio emulator rotate screen(portrait &amp; landsacpe)</h2><p><img src="/img/Mobile/01.jpg" alt="Instruction"> </p><p><a href="https://github.com/zx1314621/ListViewClick">Demo</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt; This note will be used to keep track of all the knowledge gained during Android development  &lt;/p&gt;
&lt;h1 id=&quot;D</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode</title>
    <link href="http://example.com/2020/10/15/Leetcode/"/>
    <id>http://example.com/2020/10/15/Leetcode/</id>
    <published>2020-10-15T15:56:11.000Z</published>
    <updated>2020-12-15T02:12:23.347Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Instroduction</strong> In order to summarize the algorithm of Leetcode encountered</p><a id="more"></a><h1 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h1><h3 id="1626-Best-Team-With-No-Conflicts"><a href="#1626-Best-Team-With-No-Conflicts" class="headerlink" title="1626. Best Team With No Conflicts"></a>1626. Best Team With No Conflicts</h3><p><strong>Question description</strong><br><a href="https://leetcode.com/problems/best-team-with-no-conflicts/">1626. Best Team With No Conflicts</a>You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.</p><p>However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.</p><p>Given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams. </p><ul><li><p>Example 1  </p><blockquote><p>Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]<br>Output: 34(choose all)</p></blockquote></li><li><p>Example 2</p><blockquote><p>Input: scores = [4,5,6,5], ages = [2,1,2,1]<br>Output: 16(last 3)</p></blockquote></li><li><p>Example 3</p><blockquote><p>Input: scores = [1,2,3,5], ages = [8,9,10,1]<br>Output: 6(first 3)</p></blockquote></li><li><p>Constraints:</p><blockquote><p>1 &lt;= scores.length, ages.length &lt;= 1000<br>scores.length == ages.length<br>1 &lt;= scores[i] &lt;= 10<sup>6</sup><br>1 &lt;= ages[i] &lt;= 1000  </p></blockquote></li></ul><h3 id="Code-amp-Explanation"><a href="#Code-amp-Explanation" class="headerlink" title="Code &amp; Explanation"></a>Code &amp; Explanation</h3><p>Idea is to first sort the players by their age so that we don’t have to always check both the scores and the age to see whether these two players can be in the same team.</p><p>We sort age(first) and score(second) in the ascending/descending order<br>Now we know that for any player i, we can choose any player from 0 to i-1 as long as that player has higher score than this i-th player.</p><p>dp[i] stores the maximum score that can be obtained when i-th player is included and all other players are between indices 0 and i-1.<br>Once we get the answer for all indices, we can simply find the max and that will be the answer.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    class People &#123;</span><br><span class="line">        int age;</span><br><span class="line">        int score;</span><br><span class="line">        public People(int age, int score) &#123;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">            this.score &#x3D; score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public int bestTeamScore(int[] scores, int[] ages) &#123;</span><br><span class="line">        if (scores &#x3D;&#x3D; null || ages &#x3D;&#x3D; null || scores.length !&#x3D; ages.length) return -1;</span><br><span class="line">        </span><br><span class="line">        int n &#x3D; scores.length;</span><br><span class="line">        People[] people &#x3D; new People[n];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">            people[i] &#x3D; new People(ages[i], scores[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(people, (a, b) -&gt; (a.age !&#x3D; b.age ? a.age - b.age : a.score - b.score));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        int[] dp &#x3D; new int[n];</span><br><span class="line">        dp[0] &#x3D; people[0].score;</span><br><span class="line">        int res &#x3D; dp[0];</span><br><span class="line">        </span><br><span class="line">        for (int i &#x3D; 1; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] &#x3D; people[i].score;</span><br><span class="line">            for (int j &#x3D; 0; j &lt; i; j++) &#123;</span><br><span class="line">                if (people[j].age &#x3D;&#x3D; people[i].age || people[j].score &lt;&#x3D; people[i].score) &#123;</span><br><span class="line">                    dp[i] &#x3D; Math.max(dp[i], dp[j] + people[i].score);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res &#x3D; Math.max(dp[i], res);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return res;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h3><p>Time: O(n<sup>2</sup>)<br>Space: O(n)</p><h3 id="1641-Count-Sorted-Vowel-Strings"><a href="#1641-Count-Sorted-Vowel-Strings" class="headerlink" title="1641. Count Sorted Vowel Strings"></a>1641. Count Sorted Vowel Strings</h3><p><strong>Question description</strong><br>Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.<br>A string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.</p><ul><li><p>Example 1  </p><blockquote><p>Input: n = 1<br>Output: 1</p></blockquote><blockquote><p>Explanation: The 5 sorted strings that consist of vowels only are [“a”,”e”,”i”,”o”,”u”].</p></blockquote></li><li><p>Example 2  </p><blockquote><p>Input: n = 2<br>Output: 15</p></blockquote><blockquote><p>Explanation: The 15 sorted strings that consist of vowels only are<br>[“aa”,”ae”,”ai”,”ao”,”au”,”ee”,”ei”,”eo”,”eu”,”ii”,”io”,”iu”,”oo”,”ou”,”uu”].<br>Note that “ea” is not a valid string since ‘e’ comes after ‘a’ in the alphabet.</p></blockquote></li><li><p>Example 3  </p><blockquote><p>Input: n = 33</p></blockquote><blockquote><p>Output: 66045    </p></blockquote></li><li><p>Constraints:   </p><blockquote><p>1 &lt;= n &lt;= 50 </p></blockquote></li></ul><h3 id="Code-amp-Explanation-1"><a href="#Code-amp-Explanation-1" class="headerlink" title="Code &amp; Explanation"></a>Code &amp; Explanation</h3><p>j = 1 only have a<br>j = 2 only have a,e<br>j = 3 only have a,e,i<br>j = 4 only have a,e,i,o<br>j = 5 only have a,e,i,o,u  </p><table><thead><tr><th align="center"><sub>i</sub>\<sup>j</sup></th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr><tr><td align="center">2</td><td align="center">0</td><td align="center">1</td><td align="center">3</td><td align="center">6</td><td align="center">10</td><td align="center">15</td></tr><tr><td align="center">3</td><td align="center">0</td><td align="center">1</td><td align="center">4</td><td align="center">10</td><td align="center">20</td><td align="center">35</td></tr><tr><td align="center">4</td><td align="center">0</td><td align="center">1</td><td align="center">5</td><td align="center">15</td><td align="center">35</td><td align="center">70</td></tr><tr><td align="center">5</td><td align="center">0</td><td align="center">1</td><td align="center">6</td><td align="center">21</td><td align="center">56</td><td align="center">126</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int countVowelStrings(int n) &#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; tradition dp</span><br><span class="line">        &#x2F;&#x2F; int[][] dp &#x3D; new int[n + 1][6];</span><br><span class="line">        &#x2F;&#x2F; Arrays.fill(dp[0], 1);</span><br><span class="line">        &#x2F;&#x2F; for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F;     for (int j &#x3D; 1; j &lt; 6; j++) &#123;</span><br><span class="line">        &#x2F;&#x2F;         dp[i][j] &#x3D; j &#x3D;&#x3D; 1 ? 1 : dp[i][j-1] + dp[i-1][j];</span><br><span class="line">        &#x2F;&#x2F;     &#125;</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line">        &#x2F;&#x2F; return dp[n][5];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; reduce space complexity</span><br><span class="line">        int[] dp &#x3D; new int[6];</span><br><span class="line">        for (int i &#x3D; 1; i &lt; 6; i++) dp[i] &#x3D; 1;</span><br><span class="line">        </span><br><span class="line">        for (int k &#x3D; 1; k &lt;&#x3D; n; k++) &#123;</span><br><span class="line">            for (int i &#x3D; 1; i &lt; 6; i++) &#123;</span><br><span class="line">                dp[i] +&#x3D; dp[i-1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        return dp[5];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    1 a e i o u</span><br><span class="line">    2 aa ae ai ao au, ee ei eo eu, ii io iu, oo ou, uu</span><br><span class="line">    3 aaa aae aai aao aau, aee aei aeo aeu, aii aio aiu, aoo aou, auu; eee eei eeo eeu, eii eio eu, eoo eou, euu;</span><br><span class="line">    iii iio iiu, ioo iou, iuu; ooo oou, ouu; uuu</span><br><span class="line">    *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Complexity-1"><a href="#Complexity-1" class="headerlink" title="Complexity"></a>Complexity</h3><p>Time: O(nk)<br>Space: O(k)</p><p><strong>Solution 2: Combination number</strong><br>Now we have n characters, we are going to insert 4 l inside.<br>We can add in the front, in the middle and in the end.<br>How many ways do we have?<br>For the 1st l, we have n+1 position to insert.<br>For the 2nd l, we have n+2 position to insert.<br>For the 3rd l, we have n+3 position to insert.<br>For the 4th l, we have n+4 position to insert.<br>Also 4 l are the same,<br>there are (n + 1) * (n + 2) * (n + 3) * (n + 4) / 4! ways.</p><p>The character before the 1st l, we set to a.<br>The character before the 2nd l, we set to e.<br>The character before the 3rd l, we set to i.<br>The character before the 4th l, we set to o.<br>The character before the 5th l, we set to u.</p><p>We get the one result for the oringinal problem.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public int countVowelStrings(int n) &#123;</span><br><span class="line">        return (n + 1) * (n + 2) * (n + 3) * (n + 4) &#x2F; 24;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Complexity-2"><a href="#Complexity-2" class="headerlink" title="Complexity"></a>Complexity</h3><p>Time: O(1)<br>Space: O(1)</p><h1 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union Find"></a>Union Find</h1><h3 id="1627-Graph-Connectivity-With-Threshold"><a href="#1627-Graph-Connectivity-With-Threshold" class="headerlink" title="1627. Graph Connectivity With Threshold"></a>1627. Graph Connectivity With Threshold</h3><p><strong>Question description</strong></p><p><a href="https://leetcode.com/problems/graph-connectivity-with-threshold/">1627. Graph Connectivity With Threshold</a> We have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:</p><ul><li>x % z == 0,</li><li>y % z == 0, and</li><li>z &gt; threshold.  </li></ul><p>Given the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [a<sub>i</sub>, b<sub>i</sub>] if cities a<sub>i</sub> and b<sub>i</sub> are connected (i.e. there is some path between them).</p><p>Return an array answer, where answer.length == queries.length and answer[i] is true if for the i<sup>th</sup> query, there is a path between a<sub>i</sub> and b<sub>i</sub>, or answer[i] is false if there is no path.</p><ul><li><p>Example 1  </p><blockquote><p>Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]<br>Output: [false,false,true]</p></blockquote><blockquote><p>Explanation: The divisors for each number:<br>  1:   1<br>2:   1, 2<br>3:   1, 3<br>4:   1, 2, 4<br>5:   1, 5<br>6:   1, 2, 3, 6<br>Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the<br>only ones directly connected.The result of each query:<br>[1,4]   1 is not connected to 4<br>[2,5]   2 is not connected to 5<br>[3,6]   3 is connected to 6 through path 3–6  </p></blockquote></li><li><p>Example 2</p><blockquote><p>Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]<br>Output: [true,true,true,true,true]<br>Explanation: The divisors for each number are the same as the previous example. However, since the threshold is 0<br>all divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.</p></blockquote></li><li><p>Example 3</p><blockquote><p>n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]<br>Output: [false,false,false,false,false]<br>Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.<br>Please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].</p></blockquote></li><li><p>Constraints:</p><blockquote><p>2 &lt;= n &lt;= 10<sup>4</sup><br>0 &lt;= threshold &lt;= n<br>1 &lt;= queries.length &lt;= 10<sup>5</sup><br>queries[i].length == 2<br>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= cities<br>a<sub>i</sub> != b<sub>i</sub>  </p></blockquote></li></ul><h3 id="Code-amp-Explanation-2"><a href="#Code-amp-Explanation-2" class="headerlink" title="Code &amp; Explanation"></a>Code &amp; Explanation</h3><p>Because the input sizes are fairly large, we must have close to constant time performance.<br>One can solve this problem by constructing a graph and then performing DFS for each query,<br>but it would quickly lead to TLE.</p><p>Idea here is to use union find data structure because all we care about is whether there<br>is exist an edge between a and b. If union-find finds that both a and b belong to the same<br>component, then there is an edge between them.</p><p>Now for union-find to do this, we will first setup the graph. Key idea to understand is that<br>any integer node a will be connected to all the multiples of a provided that a is greater than<br>the threshold. For each number from 1 to n, we will connect it to its multiples and then keep<br>queryin this awesome data structure.</p><p>Code should help you realize how easy all this is.</p><pre><code>class Solution &#123;    class UF &#123;        int distinct;        int[] roots;        int[] size;    public UF(int n) &#123;        this.distinct = n;        this.roots = new int[n + 1];        this.size = new int[n + 1];        for (int i = 1; i &lt;= n; i++) &#123;            this.roots[i] = i;            this.size[i] = 1;        &#125;    &#125;    private int findRoot(int n) &#123;        if (this.roots[n] == n) return n;        return this.roots[n] = findRoot(this.roots[n]);    &#125;    private void unite(int x, int y) &#123;        int root_x = findRoot(x);        int root_y = findRoot(y);        if (root_x == root_y) return;        // if (size[x] &gt; size[y]) &#123;        //     size[x] += size[y];        //     this.roots[root_y] = root_x;        // &#125; else &#123;        //     size[y] += size[x];        //     this.roots[root_x] = root_y;        // &#125;        if (root_x &lt; root_y) &#123;            this.roots[root_y] = root_x;        &#125; else &#123;            this.roots[root_x] = root_y;        &#125;        this.distinct--;    &#125;    private boolean connect(int i, int j) &#123;        return findRoot(i) == findRoot(j);    &#125;    private boolean united() &#123;        return this.distinct == 1;    &#125;&#125;public List&lt;Boolean&gt; areConnected(int n, int threshold, int[][] queries) &#123;    List&lt;Boolean&gt; res = new ArrayList();    if (threshold == 0) &#123;        for (int i = 0; i &lt; queries.length; i++) res.add(true);        return res;    &#125;    UF uf = new UF(n);    // the connected number must bigger than threshold    for (int i = threshold + 1; i &lt;= n; i++) &#123;        for (int j = i * 2; j &lt;= n; j += i) &#123;            uf.unite(i, j);        &#125;    &#125;    for (int[] query : queries) &#123;        res.add(uf.connect(query[0], query[1]));    &#125;    return res;&#125;&#125;</code></pre><h3 id="Complexity-3"><a href="#Complexity-3" class="headerlink" title="Complexity"></a>Complexity</h3><p>Time: O(n * log(n)) build union find<br>Space: O(n)    </p><h1 id="Tricky"><a href="#Tricky" class="headerlink" title="Tricky"></a>Tricky</h1><h2 id="GrayCode"><a href="#GrayCode" class="headerlink" title="GrayCode"></a>GrayCode</h2><h3 id="1611-Minimum-One-Bit-Operations-to-Make-Integers-Zero"><a href="#1611-Minimum-One-Bit-Operations-to-Make-Integers-Zero" class="headerlink" title="1611. Minimum One Bit Operations to Make Integers Zero"></a>1611. Minimum One Bit Operations to Make Integers Zero</h3><p><strong>Question description</strong></p><p><a href="https://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero/">1611. Minimum One Bit Operations to Make Integers Zero</a><br>Given an integer n, you must transform it into 0 using the following operations any number of times:</p><ul><li><p>Change the rightmost (0th) bit in the binary representation of n.</p></li><li><p>Change the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0.<br>Return the minimum number of operations to transform n into 0.  </p></li><li><p>Example 1</p><blockquote><p>Input: n = 0<br>Output: 0</p></blockquote></li><li><p>Example 2</p><blockquote><p>Input: n = 3<br>Output: 2<br>Explanation: The binary representation of 3 is “11”.<br>“11” -&gt; “01” with the 2nd operation since the 0th bit is 1.<br>“01” -&gt; “00” with the 1st operation.</p></blockquote></li><li><p>Example 3</p><blockquote><p>Input: n = 6<br>Output: 4<br>Explanation: The binary representation of 6 is “110”.<br>“110” -&gt; “010” with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.<br>“010” -&gt; “011” with the 1st operation.<br>“011” -&gt; “001” with the 2nd operation since the 0th bit is 1.<br>“001” -&gt; “000” with the 1st operation.</p></blockquote></li><li><p>Example 4</p><blockquote><p>Input: n = 9<br>Output: 14</p></blockquote></li><li><p>Example 5</p><blockquote><p>Input: n = 333<br>Output: 393</p></blockquote></li><li><p>Constraints:</p><blockquote><p>0 &lt;= n &lt;= 10<sup>9</sup></p></blockquote></li></ul><h3 id="Code-amp-Explanation-3"><a href="#Code-amp-Explanation-3" class="headerlink" title="Code &amp; Explanation"></a>Code &amp; Explanation</h3><p><a href="https://en.wikipedia.org/wiki/Gray_code">GrayCode</a> always has the least number of bit changes, so treating the given number as grey code and converting it to decimal gives the correct answer.  </p><table><thead><tr><th align="center">Decimal</th><th align="center">Binary</th><th align="center">GrayCode</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0000</td><td align="center">0000</td></tr><tr><td align="center">1</td><td align="center">0001</td><td align="center">0001</td></tr><tr><td align="center">2</td><td align="center">0010</td><td align="center">0011</td></tr><tr><td align="center">3</td><td align="center">0011</td><td align="center">0010</td></tr><tr><td align="center">4</td><td align="center">0100</td><td align="center">0110</td></tr><tr><td align="center">5</td><td align="center">0101</td><td align="center">0111</td></tr><tr><td align="center">6</td><td align="center">0110</td><td align="center">0101</td></tr><tr><td align="center">7</td><td align="center">0111</td><td align="center">0100</td></tr><tr><td align="center">8</td><td align="center">1000</td><td align="center">1100</td></tr><tr><td align="center">9</td><td align="center">1001</td><td align="center">1101</td></tr><tr><td align="center">10</td><td align="center">1010</td><td align="center">1111</td></tr><tr><td align="center">11</td><td align="center">1011</td><td align="center">1110</td></tr><tr><td align="center">12</td><td align="center">1100</td><td align="center">1010</td></tr><tr><td align="center">13</td><td align="center">1101</td><td align="center">1011</td></tr><tr><td align="center">14</td><td align="center">1110</td><td align="center">1001</td></tr><tr><td align="center">15</td><td align="center">1111</td><td align="center">1000</td></tr></tbody></table><p><strong>decimal to graycode</strong><br>fix the first digit, xor from left to right<br><em>1101</em>  =&gt; <em>1</em> (the first digit is fixed) =&gt; <em>10</em> (since the first two digit is same) =&gt; <em>101</em> (since the second digit is different with the third digit) =&gt; <em>1011</em> (the last two digit is different)</p><p><strong>graycode to decimal</strong><br>fix the first digit, decode from left to right<br><em>1011</em> =&gt; <em>1</em> (fix the first digit) =&gt; <em>11</em> (the second is 0, so still is 1) =&gt; <em>110</em> (the third is 1, so change from 1 to 0) =&gt; <em>1101</em> (the last is 1, so change from 0 to 1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">   public int minimumOneBitOperations(int n) &#123;</span><br><span class="line">       &#x2F;&#x2F;graycode to decimal</span><br><span class="line">       int res &#x3D; 0;</span><br><span class="line">       while (n !&#x3D; 0) &#123;</span><br><span class="line">           res ^&#x3D; n;</span><br><span class="line">           n &gt;&gt;&#x3D; 1;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       return res;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">Input 9 Expect output 14</span><br><span class="line"></span><br><span class="line">init  </span><br><span class="line">n &#x3D; 9 &#x3D; 1001  </span><br><span class="line">res &#x3D; 0  </span><br><span class="line">loop 1</span><br><span class="line">res ^&#x3D; n &#x3D;&gt; res &#x3D; 0000 ^ 1001 &#x3D; 1001</span><br><span class="line">n &gt;&gt; 1 &#x3D;&gt; n &#x3D; 100</span><br><span class="line">loop 2  </span><br><span class="line">res ^&#x3D; n &#x3D;&gt; res &#x3D; 1001 ^ 100 &#x3D; 1101  </span><br><span class="line">n &gt;&gt; 1 &#x3D;&gt; n &#x3D; 10  </span><br><span class="line">loop 3  </span><br><span class="line">res ^&#x3D; n &#x3D;&gt; res &#x3D; 1101 ^ 10 &#x3D; 1111  </span><br><span class="line">n &gt;&gt; 1 &#x3D;&gt; n &#x3D; 1  </span><br><span class="line">loop 4  </span><br><span class="line">res ^&#x3D; n &#x3D;&gt; res &#x3D; 1111 ^ 1 &#x3D; 1110</span><br><span class="line">n &gt;&gt; 1 &#x3D;&gt; n &#x3D; 0  </span><br><span class="line">end </span><br><span class="line">return res &#x3D; 14</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Complexity-4"><a href="#Complexity-4" class="headerlink" title="Complexity"></a>Complexity</h3><p>Time: O(n.bit.length)<br>Space: O(1)</p><h2 id="BitMask"><a href="#BitMask" class="headerlink" title="BitMask"></a>BitMask</h2><h3 id="1617-Count-Subtrees-With-Max-Distance-Between-Cities"><a href="#1617-Count-Subtrees-With-Max-Distance-Between-Cities" class="headerlink" title="1617. Count Subtrees With Max Distance Between Cities"></a>1617. Count Subtrees With Max Distance Between Cities</h3><p><strong>Question description</strong></p><p><a href="https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities/">1617. Count Subtrees With Max Distance Between Cities  </a><br>There are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. There exists a unique path between each pair of cities. In other words, the cities form a <strong>tree</strong>.</p><p>A <strong>subtree</strong> is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.</p><p>For each d from 1 to n-1, find the number of subtrees in which the <strong>maximum distance</strong> between any two cities in the subtree is equal to d.</p><p>Return an array of size n-1 where the dth element <strong>(1-indexed)</strong> is the number of subtrees in which the <strong>maximum distance</strong> between any two cities is equal to d.</p><p><strong>Notice</strong> that the <strong>distance</strong> between the two cities is the number of edges in the path between them.</p><ul><li><p>Example 1  </p><blockquote><p>Input: n = 4, edges = [[1,2],[2,3],[2,4]]<br>Output: [3,4,0]<br>Explanation:<br>The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.<br>The subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.<br>No subtree has two nodes where the max distance between them is 3.</p></blockquote></li><li><p>Example 2</p><blockquote><p>Input: n = 2, edges = [[1,2]]<br>Output: [1]</p></blockquote></li><li><p>Example 3</p><blockquote><p>Input: n = 3, edges = [[1,2],[2,3]]<br>Output: [2,1]</p></blockquote></li><li><p>Constraints:</p><blockquote><p>2 &lt;= n &lt;= 15(the biggest n is 15 indicates that time complexity should related to 2<sup>n</sup>)<br>edges.length == n-1<br>edges[i].length == 2<br>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n<br>All pairs (u<sub>i</sub>, v<sub>i</sub>) are distinct. </p></blockquote></li></ul><h3 id="Code-amp-Explanation-4"><a href="#Code-amp-Explanation-4" class="headerlink" title="Code &amp; Explanation"></a>Code &amp; Explanation</h3><p>Try every pair of n cities.<br>From example 1, n = 4, edges = [[1,2],[2,3],[2,4]]<br>we use bit mast to represemt where it is in this pair.<br>0000(all absence)<br>0001<br>0010<br>0011<br>0100<br>0101<br>0110<br>0111<br>1000<br>1001<br>1010<br>1011<br>1100<br>1101<br>1110<br>1111(all in)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] countSubgraphsForEachDiameter(int n, int[][] edges) &#123;</span><br><span class="line">        int[][] dist &#x3D; new int[n][n];</span><br><span class="line">        List&lt;Integer&gt;[] neighbor &#x3D; new List[n];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++) neighbor[i] &#x3D; new ArrayList();</span><br><span class="line">        for (int[] edge : edges) &#123;</span><br><span class="line">            neighbor[edge[0] - 1].add(edge[1] - 1);</span><br><span class="line">            neighbor[edge[1] - 1].add(edge[0] - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; use DFS to build a graph, and record distance between each nodes</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">            callDFS(dist, neighbor, i, -1, i, 0);</span><br><span class="line">        </span><br><span class="line">        int[] res &#x3D; new int[n-1];</span><br><span class="line">        &#x2F;&#x2F; i from 1 to (1&lt;&lt;n), loop every pair, n &#x3D; 4, (1 &lt;&lt; n) &#x3D; 16, i &#x3D; [1, 16), no 0 is because every pari can not be empty </span><br><span class="line">        for (int i &#x3D; 1; i &lt; (1 &lt;&lt; n); i++) &#123;</span><br><span class="line">            int adjacent &#x3D; 0;</span><br><span class="line">            int cities &#x3D; 0;</span><br><span class="line">            int maxDist &#x3D; 0;</span><br><span class="line">            </span><br><span class="line">            for (int j &#x3D; 0; j &lt; n; j++) &#123;</span><br><span class="line">            &#x2F;&#x2F; check if this node in this pair</span><br><span class="line">                if ((i &amp; (1 &lt;&lt; j)) !&#x3D; 0) &#123;</span><br><span class="line">                    cities ++;</span><br><span class="line">                    </span><br><span class="line">                    for (int k &#x3D; j + 1; k &lt; n; k++) &#123;</span><br><span class="line">                    &#x2F;&#x2F; check if this node int this pair</span><br><span class="line">                        if ((i &amp; (1 &lt;&lt; k)) !&#x3D; 0) &#123;</span><br><span class="line">                        &#x2F;&#x2F; record the maxDist in this pair</span><br><span class="line">                            maxDist &#x3D; Math.max(maxDist, dist[j][k]);</span><br><span class="line">                            &#x2F;&#x2F; record how many direct line in this pair</span><br><span class="line">                            if (dist[j][k] &#x3D;&#x3D; 1) adjacent++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; check this graph is valid</span><br><span class="line">            if (cities &#x3D;&#x3D; adjacent + 1 &amp;&amp; maxDist &gt; 0) res[maxDist - 1]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    private void callDFS(int[][] dist, List&lt;Integer&gt;[] neighbor, int root, int pre, int cur, int curDist) &#123;</span><br><span class="line">        if (pre &#x3D;&#x3D; cur) return;</span><br><span class="line">        </span><br><span class="line">        dist[root][cur] &#x3D; curDist;</span><br><span class="line">        dist[cur][root] &#x3D; curDist;</span><br><span class="line">        </span><br><span class="line">        for (int neighbo : neighbor[cur]) &#123;</span><br><span class="line">            if (neighbo !&#x3D; pre) &#123;</span><br><span class="line">                callDFS(dist, neighbor, root, cur, neighbo, curDist+1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Complexity-5"><a href="#Complexity-5" class="headerlink" title="Complexity"></a>Complexity</h3><p>Time: O(2<sup>n</sup> * n * n)<br>Space: O(n<sup>2</sup>)</p><h1 id="Special-Data-Structure"><a href="#Special-Data-Structure" class="headerlink" title="Special Data Structure"></a>Special Data Structure</h1><h2 id="Binary-Indexed-Tree"><a href="#Binary-Indexed-Tree" class="headerlink" title="Binary Indexed Tree"></a>Binary Indexed Tree</h2><p><a href="https://www.hackerearth.com/practice/notes/binary-indexed-tree-or-fenwick-tree/">Binary Indexed Tree</a> </p><p><a href="https://leetcode.com/problems/create-sorted-array-through-instructions/">Leetcode 1649</a></p><p><img src="/img/Leetcode/BIT.jpg" alt="Instruction"> </p><h3 id="coding-implement"><a href="#coding-implement" class="headerlink" title="coding implement"></a>coding implement</h3><pre><code>int n = input.length;int[] bits = new int[n];private void update(int idx, int delta) &#123;    while (idx &lt;= bits.length) &#123;        bits[idx]+= delta;        idx += (idx &amp; -idx);    &#125;&#125;private int get(int delta) &#123;    int res = 0;    while (delta &gt; 0) &#123;        res += bits[delta];        delta -= (delta &amp; -delta);    &#125;    return res;&#125;</code></pre><h2 id="SeagmentTree"><a href="#SeagmentTree" class="headerlink" title="SeagmentTree"></a>SeagmentTree</h2><p><a href="https://leetcode.com/problems/range-sum-query-mutable/">Leetcode 307</a></p><h3 id="coding-implement-1"><a href="#coding-implement-1" class="headerlink" title="coding implement"></a>coding implement</h3><pre><code>class SeagmentTree &#123;    SeagmentTree left;    SeagmentTree right;    int val;    int start;    int end;    public SeagmentTree(int val, int start, int end)&#123;        this.val = val;        this.start = start;        this.end = end;    &#125;&#125;SeagmentTree root;public NumArray(int[] nums) &#123;    root = buildTree(nums, 0, nums.length - 1);&#125;private SeagmentTree buildTree(int[] nums, int start, int end) &#123;    if (start &gt; end) return null;    SeagmentTree root = new SeagmentTree(nums[start], start, end);    if (start != end)  &#123;        int mid = start + (end - start) / 2;        root.left = buildTree(nums, start, mid);        root.right =  buildTree(nums, mid + 1, end);        root.val = root.left.val + root.right.val;    &#125;    return root;&#125;public void update(int i, int val) &#123;    updateSub(root, i, val);&#125;private void updateSub(SeagmentTree root, int idx, int val) &#123;    if (idx &lt; root.start || idx &gt; root.end) return;    int a = root.start, b = root.end;    if (root.start == idx &amp;&amp; root.end == idx) root.val = val;    else &#123;         int mid = root.start + (root.end - root.start) / 2;        if (idx &lt;= mid) updateSub(root.left, idx, val);        else &#123;            updateSub(root.right, idx, val);        &#125;        root.val = root.left.val + root.right.val;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Instroduction&lt;/strong&gt; In order to summarize the algorithm of Leetcode encountered&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Computer Architecture</title>
    <link href="http://example.com/2020/10/13/Computer-Architecture/"/>
    <id>http://example.com/2020/10/13/Computer-Architecture/</id>
    <published>2020-10-14T04:44:02.000Z</published>
    <updated>2020-12-07T23:11:14.119Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Introduction</strong> Take notes for the computer structure and write down the knowledge points in each chapter  </p><a id="more"></a><h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h2 id="Main-formula"><a href="#Main-formula" class="headerlink" title="Main formula"></a>Main formula</h2><h3 id="CPU-TIME"><a href="#CPU-TIME" class="headerlink" title="CPU_TIME"></a>CPU_TIME</h3><p><img src="/img/CA/1_01.jpg" alt="CPU_Time"><br>CPU TIME = execution time<br>CPU TIME = instructions * CPI * cycle time<br>CPU TIME = (instructions * CPI) / clock rate<br>CPU TIME = clock cycles / clock rate<br>CPU TIME = (Σ(instructions * CPI)) / clock rate</p><h3 id="Instruction-Count-amp-CPI"><a href="#Instruction-Count-amp-CPI" class="headerlink" title="Instruction Count &amp; CPI"></a>Instruction Count &amp; CPI</h3><p><img src="/img/CA/1_02.jpg" alt="Instruction"><br>instructions = clock cycles / cycles per instruction<br>instructions = CPU TIME / CPI / cycle time<br>instructions = CPU TIME * clock rate / CPI  </p><p>clock cycles = Σ(instructions * CPI)<br>clock cycles = instructions * CPI  </p><p>CPI = clock cycles / instructions<br>CPI = Σ ( CPI<sub>i</sub> * (instructions<sub>i</sub> / instructions))</p><h3 id="BIG-Picture"><a href="#BIG-Picture" class="headerlink" title="BIG Picture"></a>BIG Picture</h3><p><img src="/img/CA/1_03.jpg" alt="Instruction"> </p><h3 id="Pitfall-Amdahl’s-Law"><a href="#Pitfall-Amdahl’s-Law" class="headerlink" title="Pitfall: Amdahl’s Law"></a>Pitfall: Amdahl’s Law</h3><p><img src="/img/CA/1_04.jpg" alt="Instruction">   </p><h3 id="MIPS-amp-IPS"><a href="#MIPS-amp-IPS" class="headerlink" title="MIPS &amp; IPS"></a>MIPS &amp; IPS</h3><p><img src="/img/CA/1_05.jpg" alt="Instruction"><br>IPS = (instructions / CPU_TIME) = clock_rate / CPI  </p><p>MIPS = instructions / (execution_time * 10 ^ 6)<br>MIPS = (instructions) / ((instructions * CPI / clock_rate) * 10 ^ 6)<br>MIPS = clock_rate / (CPI * 10 ^ 6)  </p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><img src="/img/CA/1_ex.jpg" alt="Instruction"><br><img src="/img/CA/1_ex1.jpg" alt="Instruction"> </p><h1 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h1><h2 id="RISC-V-Instruction"><a href="#RISC-V-Instruction" class="headerlink" title="RISC-V Instruction"></a>RISC-V Instruction</h2><p><img src="/img/CA/2_01.jpg">  </p><h3 id="R-Type-regular"><a href="#R-Type-regular" class="headerlink" title="R-Type(regular)"></a>R-Type(regular)</h3><p>add x9, x20, x21  =&gt; x9 = x20 + 21</p><table><thead><tr><th align="center">f7</th><th align="center">rs2</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">0(add)</td><td align="center">21</td><td align="center">20</td><td align="center">0</td><td align="center">9</td><td align="center">51(R)</td></tr></tbody></table><p>sub x1, x2, x3 =&gt; x1 = x2 - x3</p><table><thead><tr><th align="center">f7</th><th align="center">rs2</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">32(sub)</td><td align="center">3</td><td align="center">2</td><td align="center">0</td><td align="center">1</td><td align="center">51(R)</td></tr></tbody></table><h3 id="I-type-Immediate"><a href="#I-type-Immediate" class="headerlink" title="I-type(Immediate)"></a>I-type(Immediate)</h3><p>Immediate field = funct7 + rs2 : 12 bits, holds a constant  </p><p>ld x9 240(x22) =&gt; x9 = mem[x22 + 240]</p><table><thead><tr><th align="center">imm</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">240</td><td align="center">22</td><td align="center">3</td><td align="center">9</td><td align="center">3(ld)</td></tr></tbody></table><p>addi X8, X9, 100 =&gt; x8 = x9 + 100</p><table><thead><tr><th align="center">imm</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">100</td><td align="center">9</td><td align="center">3</td><td align="center">8</td><td align="center">addi</td></tr></tbody></table><h3 id="S-type-sd"><a href="#S-type-sd" class="headerlink" title="S-type(sd)"></a>S-type(sd)</h3><p>sd x1, 1000(x2) =&gt; mem(1000 + x2) = x1</p><table><thead><tr><th align="center">f7</th><th align="center">rs2</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">31</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">8</td><td align="center">35(sd)</td></tr></tbody></table><p>1000 = 512+256+128+64+32+8 = 0011111(f7) 01000(rd)</p><h3 id="SB-type-branch"><a href="#SB-type-branch" class="headerlink" title="SB-type(branch)"></a>SB-type(branch)</h3><p>bne x10, x11, 2000. if x 10!= x11 take the branch</p><table><thead><tr><th align="center">f7</th><th align="center">rs2</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center"><div style="width: 70pt"> 0(1bit) 62(6bit)</td><td align="center">11</td><td align="center">10</td><td align="center">001</td><td align="center"><div style="width: 70pt"> 8(4bit) 0(1bit)</td><td align="center">103(bne)</td></tr></tbody></table><p>2000 = 0 111110 1000 0</p><h3 id="UJ-type-jal"><a href="#UJ-type-jal" class="headerlink" title="UJ-type(jal)"></a>UJ-type(jal)</h3><p>jal x0 2000 =&gt; (1) x0 = PC + 4 (2) PC = PC + 2000<br>f7 + rs2 + rs1 + f3 = imm[20] + imm[10 : 1] + imm[11] + imm[19:12]</p><table><thead><tr><th align="center">f7</th><th align="center">rs2</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1111101000</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1101111(jal)</td></tr></tbody></table><p>2000 = 0 00000000 0 1111101000 0</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><img src="/img/CA/2_03.jpg">  </p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><table style="width: 600px; text-align: center" >    <tr>        <td>Instruction </td>         <td>Format</td>         <td>f7</td>         <td>rs2</td>         <td>rs1</td>         <td>f3</td>         <td>rd</td>        <td>op</td>     </tr>   <tr>           <td style="width: 120px;">add x15, x16, x17</td>           <td>R</td>           <td>add</td>           <td>17</td>           <td>16</td>           <td>0</td>           <td>15</td>           <td>R</td>   </tr>   <tr>           <td>sub x4, x5, x6</td>           <td>R</td>           <td>sub</td>           <td>6</td>           <td>5</td>           <td>0</td>           <td>4</td>           <td>R</td>   </tr>   <tr>           <td>addi x8, x3, 20</td>           <td>I</td>           <td colspan="2">20</td>           <td>3</td>           <td>xxx</td>           <td>8</td>           <td>addi</td>   </tr>   <tr>           <td>sd x17, 64(x21)</td>           <td>S</td>           <td>2</td>           <td>17</td>           <td>21</td>           <td>xxx</td>           <td>0</td>           <td>sd</td>   </tr>   <tr>           <td>ld x9, 8(x12)</td>           <td>I</td>           <td colspan="2">8</td>           <td>12</td>           <td>xxx</td>           <td>9</td>           <td>ld</td>   </tr>   <tr>           <td>beq x2, x3, 2000</td>           <td>SB</td>           <td>xxx</td>           <td>3</td>           <td>2</td>           <td>xxx</td>           <td>xxx</td>           <td>beq</td>   </tr>   <tr>           <td>jal x16, 1000</td>           <td>UJ</td>           <td colspan="4">1000</td>           <td>16</td>           <td>jal</td>   </tr>   <tr>           <td>addi x21, x23, 8</td>           <td>I</td>           <td colspan="2">8</td>           <td>23</td>           <td>xxx</td>           <td>21</td>           <td>addi</td>   </tr><!--    <tr>        <td rowspan="2">合并列</td>            <td >行二列二</td>      </tr>    <tr>        <td >行三列二</td>      </tr>--></table><h3 id="Addressing-Mode"><a href="#Addressing-Mode" class="headerlink" title="Addressing Mode"></a>Addressing Mode</h3><p><img src="/img/CA/2_04.jpg">   </p><ul><li><p>Branch address  </p><blockquote><p>beq x1, x2, offset =&gt; if (x1 = x2) goto brach address<br>Format of brach address:  </p><ol><li>Offset in binary, 13 bits:imm[12:0]  </li><li>Replace the least significant bit by 0(least significant bit is the most right bit)  </li><li>Branch address = PC + imm[12:0]0(add one more zero in the right, the total length is 14)</li></ol></blockquote></li></ul><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p><img src="/img/CA/2_ex.jpg" alt="Instruction"> </p><h1 id="Chapter-4"><a href="#Chapter-4" class="headerlink" title="Chapter 4"></a>Chapter 4</h1><h2 id="functional-units"><a href="#functional-units" class="headerlink" title="functional units"></a>functional units</h2><p><img src="/img/CA/4_01.jpg">  </p><h2 id="DataPath"><a href="#DataPath" class="headerlink" title="DataPath"></a>DataPath</h2><h3 id="R-type"><a href="#R-type" class="headerlink" title="R-type"></a>R-type</h3><p><strong>Basic Steps</strong>  </p><ul><li>fetch instructions</li><li>select registers(rs1, rs2)</li><li>ALU operations on two data, need ALU</li><li>write back registers</li></ul><p><strong>Example</strong><br>add x3, x4, x5 =&gt; x3 = x4 + x5  </p><table><thead><tr><th align="center">f7</th><th align="center">rs2</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">add</td><td align="center">5</td><td align="center">4</td><td align="center">0</td><td align="center">3</td><td align="center">R</td></tr></tbody></table><p><img src="/img/CA/4_02.jpg">  </p><h3 id="I-type-Immediate-1"><a href="#I-type-Immediate-1" class="headerlink" title="I-type(Immediate)"></a>I-type(Immediate)</h3><p><strong>Basic Steps</strong>  </p><ul><li>fetch instructions</li><li>select registers(rs1)</li><li>calculate address, need ALU</li><li>access memory(read memory)</li><li>write register file(rd)</li></ul><p><strong>Example</strong><br>ld x3 64(x4) =&gt; x3 = mem[x4 + 64]  </p><table><thead><tr><th align="center">imm</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">64</td><td align="center">4</td><td align="center">xxx</td><td align="center">3</td><td align="center">addi</td></tr><tr><td align="center"><img src="/img/CA/4_03.jpg"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="S-type-sd-1"><a href="#S-type-sd-1" class="headerlink" title="S-type(sd)"></a>S-type(sd)</h3><p><strong>Basic Steps</strong>  </p><ul><li>fetch instructions</li><li>select two register(rs1, rs2)</li><li>calculate address, need ALU</li><li>access memory(write memory)</li></ul><p><strong>Example</strong><br>sd x3 64(x4) =&gt; mem[x4 + 64] = x3</p><table><thead><tr><th align="center">f7</th><th align="center">rs2</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">xxx</td><td align="center">0</td><td align="center">sd</td></tr><tr><td align="center"><img src="/img/CA/4_04.jpg"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="SB-type-branch-1"><a href="#SB-type-branch-1" class="headerlink" title="SB-type(branch)"></a>SB-type(branch)</h3><p><strong>Basic Steps</strong>  </p><ul><li>fetch instructions</li><li>select registers</li><li>test condition, calculate branch address(need additional ALU)</li></ul><p><img src="/img/CA/4_05.jpg"></p><p><strong>Example</strong><br>beq x1, x2, offset =&gt; if x1 = x2, pc = offset + pc + 4</p><table><thead><tr><th align="center">f7</th><th align="center">rs2</th><th align="center">rs1</th><th align="center">f3</th><th align="center">rd</th><th align="center">op</th></tr></thead><tbody><tr><td align="center">xxx</td><td align="center">2</td><td align="center">1</td><td align="center">xxx</td><td align="center">xxx</td><td align="center">beq</td></tr></tbody></table><h3 id="UJ-type-jal-1"><a href="#UJ-type-jal-1" class="headerlink" title="UJ-type(jal)"></a>UJ-type(jal)</h3><p><strong>Example</strong><br>jal x0 2000 =&gt; (1) x0 = PC + 4 (2) PC = PC + 2000<br><img src="/img/CA/4_12.jpg"> </p><h3 id="Single-Datapath-for-Single-Cycle"><a href="#Single-Datapath-for-Single-Cycle" class="headerlink" title="Single Datapath for Single Cycle"></a>Single Datapath for Single Cycle</h3><p><img src="/img/CA/4_06.jpg"><br><img src="/img/CA/4_07.jpg"><br><img src="/img/CA/4_08.jpg">  </p><p><img src="/img/CA/4_09.jpg">  </p><h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><p><img src="/img/CA/4_10.jpg">  </p><p>Data Memory is only used during load and store.  </p><h3 id="Function-code-of-ALU-Control"><a href="#Function-code-of-ALU-Control" class="headerlink" title="Function code of ALU Control"></a>Function code of ALU Control</h3><p>ALU used for  </p><ul><li>Load/Store: F = add  </li><li>Branch: F = subtract</li><li>R-type: F depends on f7,f3</li></ul><table><thead><tr><th align="center">ALU control</th><th align="center">Function</th></tr></thead><tbody><tr><td align="center">0000</td><td align="center">AND</td></tr><tr><td align="center">0001</td><td align="center">OR</td></tr><tr><td align="center">0010</td><td align="center">add</td></tr><tr><td align="center">0110</td><td align="center">subtract</td></tr></tbody></table><p><strong>truth table</strong><br><img src="/img/CA/4_11.jpg">  </p><h3 id="Summary-of-execution-Time-Analysis"><a href="#Summary-of-execution-Time-Analysis" class="headerlink" title="Summary of execution Time Analysis"></a>Summary of execution Time Analysis</h3><p><img src="/img/CA/4_13.jpg">  </p><h3 id="optimization-replace-amp-eliminated-control-line"><a href="#optimization-replace-amp-eliminated-control-line" class="headerlink" title="optimization(replace &amp; eliminated control line)"></a>optimization(replace &amp; eliminated control line)</h3><p><img src="/img/CA/4_14.jpg">  </p><h3 id="cycle-time-example"><a href="#cycle-time-example" class="headerlink" title="cycle time example"></a>cycle time example</h3><p><img src="/img/CA/4_15.jpg">  </p><h2 id="PipeLine"><a href="#PipeLine" class="headerlink" title="PipeLine"></a>PipeLine</h2><h3 id="Basic-idea-of-pipeline"><a href="#Basic-idea-of-pipeline" class="headerlink" title="Basic idea of pipeline"></a>Basic idea of pipeline</h3><ul><li><p>5 steps: IF(instruction fetch), ID(Instruction decoding), EX(execution), MEM(memory access), WB(write back).</p></li><li><p>For the current step, hardware of other steps are idle.</p></li><li><p>Use the idle hardware to work on other instructions  </p><blockquote><p>Overlap the instructions executions<br>Add buffers to hold partial results of instruction executions</p></blockquote></li></ul><h3 id="RISC-V-Pipelined-Datapath"><a href="#RISC-V-Pipelined-Datapath" class="headerlink" title="RISC-V Pipelined Datapath"></a>RISC-V Pipelined Datapath</h3><p><img src="/img/CA/4_16.jpg"></p><h3 id="Pipeline-Control"><a href="#Pipeline-Control" class="headerlink" title="Pipeline Control"></a>Pipeline Control</h3><p><img src="/img/CA/4_17.jpg"></p><p><strong>Example</strong> add x4, x2, x3<br><img src="/img/CA/4_18.jpg">  </p><ul><li>Execution time of <strong>n</strong> instructions </li></ul><blockquote><p>5 + n - 1 = n + 4, the first instruction is 5 cycle time, the remaining instruciton is 1 cycle time.</p></blockquote><ul><li>Speedup  </li></ul><blockquote><p>(5 * n) / (n + 4) ≈ 5</p></blockquote><ul><li>CPI = cycle time / instruction = (n + 4) / n ≈ 1</li></ul><h3 id="Buffer-size"><a href="#Buffer-size" class="headerlink" title="Buffer size"></a>Buffer size</h3><ul><li>IF/ID: 32(inst) + 64(PC) = 96</li><li>ID/EX: 2+3+3+64*4+4+5 = 273</li><li>EX/MEM: 2+3+1+64*3+5 = 203</li><li>MEM/WB: 2+5+64*2 = 135<br><img src="/img/CA/4_19.jpg">  </li></ul><p><strong>Example: How the five instructions go through the pipe, and what are the buffer values</strong><br><img src="/img/CA/4_20.jpg"><br><img src="/img/CA/4_21.jpg"><br><img src="/img/CA/4_22.jpg">  </p><h3 id="Data-Hazards"><a href="#Data-Hazards" class="headerlink" title="Data Hazards"></a>Data Hazards</h3><p><img src="/img/CA/4_23.jpg"><br><img src="/img/CA/4_24.jpg"><br><strong>WAW,WAR won’t cause Data Hazards</strong>, because write is the last process of instruction, write always after the read.</p><h3 id="Handle-Data-Hazards"><a href="#Handle-Data-Hazards" class="headerlink" title="Handle Data Hazards"></a>Handle Data Hazards</h3><ul><li><p>Compiler approach  </p><blockquote><p>insert dummy operations or “nops”<br>reschedule instructions</p></blockquote></li><li><p>Hardware approach</p><blockquote><p>forwarding</p></blockquote></li></ul><p><strong>Example</strong><br><img src="/img/CA/4_25.jpg"><br><img src="/img/CA/4_26.jpg">  </p><h3 id="How-to-identify-all-dependence"><a href="#How-to-identify-all-dependence" class="headerlink" title="How to identify all dependence"></a>How to identify all dependence</h3><ul><li>Find all instructions that write registers</li><li>For each such instruction writing register x<sub>j</sub>, identify all other instructions that either read or write register x<sub>j</sub></li><li>Data dependence graph(DDG)<br><img src="/img/CA/4_27.jpg">  </li></ul><h3 id="Forwarding"><a href="#Forwarding" class="headerlink" title="Forwarding"></a>Forwarding</h3><p><img src="/img/CA/4_29.jpg"><br><img src="/img/CA/4_28.jpg">  </p><p><img src="/img/CA/4_30.jpg"><br><strong>basic forwarding path</strong><br><img src="/img/CA/4_31.jpg">  </p><h4 id="Detecting-the-need-to-Forward"><a href="#Detecting-the-need-to-Forward" class="headerlink" title="Detecting the need to Forward"></a>Detecting the need to Forward</h4><p><img src="/img/CA/4_32.jpg">  </p><ul><li><p>But only if forwarding instructions will write to a register!  </p><blockquote><p>EX/MEM.RegWrite, MEM/WB.RegWrite</p></blockquote></li><li><p>Only if Rd for that instruction is not 0</p><blockquote><p>EX/MEM.RegisterRd!=0<br>MEM/WB.RegisterRd!=0</p></blockquote></li></ul><h4 id="summary-forwarding-conditions"><a href="#summary-forwarding-conditions" class="headerlink" title="summary-forwarding conditions"></a>summary-forwarding conditions</h4><p><img src="/img/CA/4_33.jpg">  </p><h3 id="A-Bug-Double-Data-Hazard"><a href="#A-Bug-Double-Data-Hazard" class="headerlink" title="A Bug: Double Data Hazard"></a>A Bug: Double Data Hazard</h3><ul><li><p>Consider the sequence:  </p><blockquote><p>add x1, x1, x2<br>add x1, x1, x3<br>add x1, x1, x4</p></blockquote></li><li><p>Both hazards occur</p><blockquote><p>Want to use the most recent</p></blockquote></li><li><p>Revise MEM hazard condition</p><blockquote><p>Only forward if EX hazard condition isn’t true</p></blockquote></li></ul><p><img src="/img/CA/4_34.jpg">  </p><h3 id="Load-use-Hazard-can’t-forward"><a href="#Load-use-Hazard-can’t-forward" class="headerlink" title="Load-use Hazard, can’t forward"></a>Load-use Hazard, can’t forward</h3><p><img src="/img/CA/4_35.jpg"><br><img src="/img/CA/4_36.jpg">  </p><h3 id="Harzard-Detection"><a href="#Harzard-Detection" class="headerlink" title="Harzard Detection"></a>Harzard Detection</h3><p><img src="/img/CA/4_37.jpg">  </p><ul><li><p>check if instruction x1 in EX and instruction in ID have Load Harzard. </p></li><li><p>ALU operand register numbers in ID stage are given by</p><blockquote><p>IF/ID.RegisterRs1, IF/ID.RegisterRs2</p></blockquote></li><li><p>Load-use harzard when</p><blockquote><p>ID/EX.MemRead and<br>  ((ID/EX.RegisterRd = IF/ID.RegisterRs1) or<br>  (ID/EX.RegisterRd = IF/ID.RegisterRs2))</p></blockquote></li><li><p>if detected, stall and insert bubble</p></li></ul><h4 id="How-to-Stall-the-Pipeline"><a href="#How-to-Stall-the-Pipeline" class="headerlink" title="How to Stall the Pipeline"></a>How to Stall the Pipeline</h4><ul><li><p>Force control values in ID/EX register to 0</p><blockquote><p>EX,MEM and WB do <strong>nop</strong>(no-operation)</p></blockquote></li><li><p>Prevent update of PC and IF/ID register</p><blockquote><p>Using instruction is decoded again<br>Following instruction is fetched again<br>1-cycle stall allows MEM to read data for <strong>ld</strong>  </p><pre><code>  - Can subsequently forward to EX stage</code></pre></blockquote></li></ul><p><img src="/img/CA/4_38.jpg">  </p><h3 id="Branch-Hazards"><a href="#Branch-Hazards" class="headerlink" title="Branch Hazards"></a>Branch Hazards</h3><p><img src="/img/CA/4_39.jpg">  </p><h3 id="Handle-Branch-Hazards"><a href="#Handle-Branch-Hazards" class="headerlink" title="Handle Branch Hazards"></a>Handle Branch Hazards</h3><p><strong>just lose 1 cycle when branch is taken</strong></p><p><img src="/img/CA/4_40.jpg">  </p><h3 id="Flushing-instrucion-summary"><a href="#Flushing-instrucion-summary" class="headerlink" title="Flushing instrucion summary"></a>Flushing instrucion summary</h3><p><img src="/img/CA/4_41.jpg">  </p><h3 id="Performance-Analysis-–-Individual-CPI"><a href="#Performance-Analysis-–-Individual-CPI" class="headerlink" title="Performance Analysis – Individual CPI"></a>Performance Analysis – Individual CPI</h3><h4 id="Basic-pipeline"><a href="#Basic-pipeline" class="headerlink" title="Basic pipeline"></a>Basic pipeline</h4><p><img src="/img/CA/4_42.jpg">  </p><h4 id="Advanced-pipeline"><a href="#Advanced-pipeline" class="headerlink" title="Advanced pipeline"></a>Advanced pipeline</h4><p><img src="/img/CA/4_43.jpg">  </p><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h3><p><img src="/img/CA/4_44.jpg">  </p><h3 id="Static-Dual-Issue"><a href="#Static-Dual-Issue" class="headerlink" title="Static Dual Issue"></a>Static Dual Issue</h3><p><img src="/img/CA/4_45.jpg">  </p><h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h3><p><img src="/img/CA/4_46.jpg">  </p><h4 id="Powerful-project"><a href="#Powerful-project" class="headerlink" title="Powerful project"></a>Powerful project</h4><p><img src="/img/CA/4_47.jpg"> </p><h3 id="Loop-unrolling"><a href="#Loop-unrolling" class="headerlink" title="Loop unrolling"></a>Loop unrolling</h3><ul><li><p>Replicate loop body to expose more parallelism</p><blockquote><p> Reduces loop-control overhead</p></blockquote></li><li><p>Example enroll by 2,and 3<br><img src="/img/CA/4_48.jpg"> </p></li></ul><h3 id="Concluding-remarks"><a href="#Concluding-remarks" class="headerlink" title="Concluding remarks"></a>Concluding remarks</h3><ul><li><p>ISA influences design of datapath and control</p></li><li><p>Pipelining improves instruction throughput using parallelism</p><blockquote><p>More instructions completed persecond<br>Latency for each instruction not reduced</p></blockquote></li><li><p>Hazards: structural, data, control</p></li></ul><h1 id="Chapter-5"><a href="#Chapter-5" class="headerlink" title="Chapter 5"></a>Chapter 5</h1><p><img src="/img/CA/5_01.jpg">  </p><h2 id="Memory-hierarchy"><a href="#Memory-hierarchy" class="headerlink" title="Memory hierarchy"></a>Memory hierarchy</h2><p><img src="/img/CA/5_02.jpg"><br><strong>Goal of Memory hierarchy</strong>  </p><ul><li>speed of highest level (cache)</li><li>size of lowest level (disk)</li></ul><h2 id="Principle-of-locality"><a href="#Principle-of-locality" class="headerlink" title="Principle of locality"></a>Principle of locality</h2><p>Program access a relative small portion of their address space — if an item is referenced.  </p><ul><li>it will tend to be referenced again soon – <strong>temporal locality</strong>  </li><li>nearby items will tend to be referenced soon – <strong>spatial locality</strong></li></ul><h2 id="Big-picture"><a href="#Big-picture" class="headerlink" title="Big picture"></a>Big picture</h2><p><img src="/img/CA/5_03.jpg">  </p><h2 id="Address-mapping"><a href="#Address-mapping" class="headerlink" title="Address mapping"></a>Address mapping</h2><h3 id="Direct-address-mapping"><a href="#Direct-address-mapping" class="headerlink" title="Direct address mapping"></a>Direct address mapping</h3><ul><li><p>Lower-order 3 bits of M.address = C.index</p><blockquote><p>Memory locations with the same lower-order 3 bits share the same cache<br>location-due to spatial locality      </p></blockquote></li><li><p>The block in cache to be replaced is fixed</p></li><li><p>How do I know if the data is what I want?</p><blockquote><p>Tags: consist of higher-order bits of memory addresses    </p></blockquote></li></ul><h4 id="Example-5"><a href="#Example-5" class="headerlink" title="Example"></a>Example</h4><p><img src="/img/CA/5_04.jpg">  </p><h3 id="Blocksize-2"><a href="#Blocksize-2" class="headerlink" title="Blocksize = 2"></a>Blocksize = 2</h3><p><img src="/img/CA/5_05.jpg">  </p><h4 id="Example-6"><a href="#Example-6" class="headerlink" title="Example"></a>Example</h4><p><img src="/img/CA/5_06.jpg">    </p><p><img src="/img/CA/5_07.jpg">  </p><p><img src="/img/CA/5_08.jpg">  </p><p><img src="/img/CA/5_09.jpg">  </p><h4 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary"></a>Summary</h4><p><img src="/img/CA/5_10.jpg">  </p><h3 id="Write-through"><a href="#Write-through" class="headerlink" title="Write through"></a>Write through</h3><p><img src="/img/CA/5_11.jpg"></p><h3 id="Write-back"><a href="#Write-back" class="headerlink" title="Write back"></a>Write back</h3><p><img src="/img/CA/5_12.jpg">  </p><h3 id="Handle-cache-miss"><a href="#Handle-cache-miss" class="headerlink" title="Handle cache miss"></a>Handle cache miss</h3><p><img src="/img/CA/5_13.jpg">  </p><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><p><img src="/img/CA/5_14.jpg">  </p><h4 id="Performance-Example"><a href="#Performance-Example" class="headerlink" title="Performance Example"></a>Performance Example</h4><p><img src="/img/CA/5_15.jpg">  </p><h3 id="Cache-Misses-3-C’s"><a href="#Cache-Misses-3-C’s" class="headerlink" title="Cache Misses: 3 C’s"></a>Cache Misses: 3 C’s</h3><ul><li>Complusory miss(cold start misses): A cache miss caused by the 1<sup>st</sup> access to a block that has never been in the cache.</li><li>Capacity miss: A cache miss that occurs because of the cache size.</li><li>Conflict miss(collision miss): A cache miss that occurs when multiple blocks compete for the same set while other sets are available.</li></ul><h3 id="Average-Memory-Access-Time"><a href="#Average-Memory-Access-Time" class="headerlink" title="Average Memory Access Time"></a>Average Memory Access Time</h3><p><img src="/img/CA/5_16.jpg">  </p><h3 id="Set-Associative-Cache–Motivation"><a href="#Set-Associative-Cache–Motivation" class="headerlink" title="Set Associative Cache–Motivation"></a>Set Associative Cache–Motivation</h3><p><img src="/img/CA/5_17.jpg">  </p><p><img src="/img/CA/5_18.jpg">  </p><ul><li><p>Fully associative</p><blockquote><p>Allow a given block to go in any cache entry<br>Requires all entries to be searched at once<br>Comparator per entry(expensive)</p></blockquote></li><li><p>n-way set associative</p><blockquote><p>Each set contains n entries<br>Block number determines which set: <strong>(Block number) modulo(#Sets in cache)</strong><br>Search all entries in a given set at once<br>n comparators(less expensive)</p></blockquote></li></ul><h3 id="Comparison-of-2-caches-with-8-words"><a href="#Comparison-of-2-caches-with-8-words" class="headerlink" title="Comparison of 2 caches with 8 words"></a>Comparison of 2 caches with 8 words</h3><p><img src="/img/CA/5_19.jpg">  </p><p><img src="/img/CA/5_20.jpg">  </p><h3 id="Miss-ratio-with-associativity"><a href="#Miss-ratio-with-associativity" class="headerlink" title="Miss ratio with associativity"></a>Miss ratio with associativity</h3><p><img src="/img/CA/5_21.jpg"><br>Increase associativity, decrease miss ratio, increase the return time(because it need to search all tag)</p><p><img src="/img/CA/5_22.jpg">  </p><h3 id="Multi-cache-level"><a href="#Multi-cache-level" class="headerlink" title="Multi-cache-level"></a>Multi-cache-level</h3><p><img src="/img/CA/5_23.jpg">  </p><h2 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h2><p><img src="/img/CA/5_24.jpg">  </p><h3 id="Addressing-Mapping-amp-Address-Translation"><a href="#Addressing-Mapping-amp-Address-Translation" class="headerlink" title="Addressing Mapping &amp; Address Translation"></a>Addressing Mapping &amp; Address Translation</h3><ul><li><p>Address mapping–fully associative:</p><blockquote><p>a page can go any page frame in physical memory</p></blockquote></li><li><p>Address translation</p><blockquote><p>by page table: tells if a page is in physical memory; if it is in, provides the physical address<br>  <strong>each program has a page table</strong><br>  <strong>page table stored in main memory</strong></p></blockquote></li><li><p>Page table register: pointing to the page table</p></li></ul><h3 id="Page-Table"><a href="#Page-Table" class="headerlink" title="Page Table"></a>Page Table</h3><p><img src="/img/CA/5_25.jpg">  </p><h3 id="Replacement-Policy"><a href="#Replacement-Policy" class="headerlink" title="Replacement Policy"></a>Replacement Policy</h3><p><img src="/img/CA/5_26.jpg">  </p><h3 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h3><p><img src="/img/CA/5_27.jpg">  </p><h3 id="TLB–cache-of-page-table"><a href="#TLB–cache-of-page-table" class="headerlink" title="TLB–cache of page table"></a>TLB–cache of page table</h3><p><img src="/img/CA/5_28.jpg">  </p><p><img src="/img/CA/5_29.jpg">  </p><h3 id="process-of-TLB"><a href="#process-of-TLB" class="headerlink" title="process of TLB"></a>process of TLB</h3><p><img src="/img/CA/5_30.jpg">  </p><h3 id="Example-TLB-translation"><a href="#Example-TLB-translation" class="headerlink" title="Example TLB translation"></a>Example TLB translation</h3><p><img src="/img/CA/5_31.jpg">  </p><h1 id="Chapter-3"><a href="#Chapter-3" class="headerlink" title="Chapter 3"></a>Chapter 3</h1><h2 id="Normalized-Number-in-Binary"><a href="#Normalized-Number-in-Binary" class="headerlink" title="Normalized Number in Binary"></a>Normalized Number in Binary</h2><p><img src="/img/CA/5_32.jpg">  </p><h2 id="Represent-Normalized-Number-in-Computer-IEEE"><a href="#Represent-Normalized-Number-in-Computer-IEEE" class="headerlink" title="Represent Normalized Number in Computer IEEE"></a>Represent Normalized Number in Computer IEEE</h2><p><img src="/img/CA/5_33.jpg"><br><strong>Why a bias</strong>  </p><ul><li><p>If we use 2’s complement for exponent, not good for sorting and comparison  </p><blockquote><p>0000 0000 most negative exponent<br>1111    1111 most positive exponent</p></blockquote></li></ul><h3 id="Example-floating-transition-fraction"><a href="#Example-floating-transition-fraction" class="headerlink" title="Example floating transition fraction"></a>Example floating transition fraction</h3><p><img src="/img/CA/5_34.jpg"><br><img src="/img/CA/5_35.jpg">  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt; Take notes for the computer structure and write down the knowledge points in each chapter  &lt;/p&gt;</summary>
    
    
    
    
    <category term="SCU, Campus" scheme="http://example.com/tags/SCU-Campus/"/>
    
  </entry>
  
  <entry>
    <title>How to post new</title>
    <link href="http://example.com/2020/10/13/hello-world/"/>
    <id>http://example.com/2020/10/13/hello-world/</id>
    <published>2020-10-14T00:03:42.491Z</published>
    <updated>2020-10-14T04:39:22.069Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>iOS 开发之多线程 GCD</title>
    <link href="http://example.com/2015/08/05/iOS-%E5%BC%80%E5%8F%91%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8BGCD/"/>
    <id>http://example.com/2015/08/05/iOS-%E5%BC%80%E5%8F%91%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8BGCD/</id>
    <published>2015-08-06T02:57:03.000Z</published>
    <updated>2016-05-02T06:57:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Grand Central Dispatch（GCD）</strong> 是 Apple 开发的一个多核编程的较新的解决方法。它主要用于优化应用程序以支持多核处理器以及其他对称多处理系统。它是一个在线程池模式的基础上执行的并发任务。GCD 可用于多核的并行运算；GCD 会自动利用更多的 CPU 内核（比如双核、四核）；GCD 会自动管理线程的生命周期（创建线程、调度任务、销毁线程）；</p><a id="more"></a><h1 id="同步-amp-异步"><a href="#同步-amp-异步" class="headerlink" title="同步&amp;异步"></a>同步&amp;异步</h1><p>同步和异步的概念主要区别：具不具备开启新的线程的能力，决定了任务在哪一个线程执行了；但更确切的说同步（sync）和 异步（async）的区别在于会不会阻塞当前线程，直到 Block 中的任务执行完毕；同步（sync） 操作，它会阻塞当前线程并等待 Block 中的任务执行完毕，然后当前线程才会继续往下运行。异步（async）操作，当前线程会直接往下执行，它不会阻塞当前线程；</p><ul><li><p>同步：在当前线程中执行任务，不具备开启新线程的能力；</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_sync</span>(<span class="built_in">dispatch_queue_t</span> queue, DISPATCH_NOESCAPE dispatch_block_t block);</span><br></pre></td></tr></table></figure></li><li><p>异步：在新的线程中执行任务，具备开启新线程的能力；</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(<span class="built_in">dispatch_queue_t</span> queue, dispatch_block_t block);</span><br></pre></td></tr></table></figure></li></ul><h1 id="任务-amp-队列"><a href="#任务-amp-队列" class="headerlink" title="任务&amp;队列"></a>任务&amp;队列</h1><p>任务：即具体要干的事情要执行的操作，一般是一段代码块，在 GCD 中是一个 就是一个 Block 块，<strong>这里需要特意留意下任务是 Block 块</strong>；任务存放于队列中，任务有两种执行方式：是串行还是并行；同步和异步决定任务在那条线程中执行；</p><p>队列：用于存放任务，GCD 中队列分为两大类 <code>dispatch_queue_t</code>，串行队列 和 并行队列，队列的类型决定了任务的执行方式；</p><ul><li><p>串行队列：放到串行队列的任务，任务会以 FIFO（先进先出）的方式地取出来，让任务一个接着一个地执行（一个任务执行完毕后，再执行下一个任务），实际上串行队列中也只能开启一条新线程；其中特殊的是系统自身就已经创建了一个主队列，对应着主线程其也是串行队列，主线程的作用是处理UI事件（点击事件、滚动事件、拖拽事情），串行队列的创建及获取有如下方式：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主队列 - 特殊的串行队列</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建队列 - 串行队列</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 创建队列</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 第一个参数： &quot;com.zerocc.testQueue&quot; 队列名 可用于 Instruments 的调试和 CrashLog 查看</span></span><br><span class="line"><span class="comment"> 第二个参数： NULL 指定为 NULL 或 DISPATCH_QUEUE_SERIAL,生成 Serial Dispatch Queue；</span></span><br><span class="line"><span class="comment"> 指定为 DISPATCH_QUEUE_CONCURRENT，生成 Concurrent Dispatch Queue。</span></span><br><span class="line"><span class="comment"> 返回值：    队列，dispatch_queue_t 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.zerocc.test00Queue&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.zerocc.test01Queue&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br></pre></td></tr></table></figure></li><li><p>并发队列：放到并发队列的任务，任务也是以 FIFO 的方式取出来，但不同的是，它取出来一个就会放到一个线程，然后再取出来一个又放到另一个的线程。这样由于取的动作很快，忽略不计，看起来，所有的任务都是一起并发执行的；</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局并发队列</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取全局并发队列</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 第一个参数：用于指定队列优先级 一般使用默认优先级即可 DISPATCH_QUEUE_PRIORITY_DEFAULT 0；其它三种有:</span></span><br><span class="line"><span class="comment">  DISPATCH_QUEUE_PRIORITY_HIGH  2，</span></span><br><span class="line"><span class="comment">  DISPATCH_QUEUE_PRIORITY_LOW  -2，</span></span><br><span class="line"><span class="comment">  DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN 2 后台优先级</span></span><br><span class="line"><span class="comment"> 第二个参数：苹果预留设计传入0即可 0</span></span><br><span class="line"><span class="comment"> 返回值：   全局并发队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并发队列</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.zerocc.test02Queue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure></li></ul><p>总结：</p><ul><li><code>dispatch_sync</code> 同步执行不管任务是在串行队列还是在并行队列，任务都是在当前线程一个接一个执行(主队列特例除外例如子线程中调用 sync + 主队列那么任务会从子线程回到主线程执行) - <a href="https://developer.apple.com/documentation/dispatch/1452870-dispatch_sync">apple documentation Discussion</a>；</li><li><code>dispatch_async</code> 异步执行任务放在串行队列，任务在其它线程一个接一个执行；任务放在并行队列，任务在多个线程中并发执行；</li></ul><h1 id="GCD-常用方法"><a href="#GCD-常用方法" class="headerlink" title="GCD 常用方法"></a>GCD 常用方法</h1><h2 id="dispatch-once-（GCD-一次性代码执行）"><a href="#dispatch-once-（GCD-一次性代码执行）" class="headerlink" title="dispatch_once （GCD 一次性代码执行）"></a>dispatch_once （GCD 一次性代码执行）</h2><p><code>dispatch_once</code> 能保证 Block 中代码块在程序运行过程只执行一次，常用于单例的创建；并且在多线程的环境下，dispatch_once 可以保证线程安全；</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        [<span class="keyword">self</span> disaptchOnce];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)disaptchOnce &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>, __func__);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;dispatch_once - 执行任务&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 点击后打印结果如下, disaptchOnce 方法调用了三次，其中 dispatch_once 的 block 代码块只执行一次</span><br><span class="line">... CCBlogCode[41182:17902797] -[CCGCDVC disaptchOnce]</span><br><span class="line">... CCBlogCode[41182:17902797] dispatch_once - 执行任务</span><br><span class="line">... CCBlogCode[41182:17902797] -[CCGCDVC disaptchOnce]</span><br><span class="line">... CCBlogCode[41182:17902797] -[CCGCDVC disaptchOnce]</span><br></pre></td></tr></table></figure><h2 id="dispatch-group（GCD-队列组）"><a href="#dispatch-group（GCD-队列组）" class="headerlink" title="dispatch_group（GCD 队列组）"></a>dispatch_group（GCD 队列组）</h2><p>队列组可以将多个队列添加到一个组里，从而管理监听所有任务都执行完成情况，当所有任务都执行完成有一个回调监听。这里的多个队列可以是不同的；运用场景可以是多个网络请求的控制等例如表单类型填写上报优先级问题；实现步骤如下：</p><ul><li>创建队列组，通过调用 <code>dispatch_group_create()</code>方法创建得到 <code>dispatch_group_t</code> 类型 group；</li><li>将队列中的任务添加到队列组 group 中, 通过 <code>dispatch_group_async(队列组，队列，block)</code> 方法；次步也可以使用 <code>dispatch_group_enter</code> 和 <code>dispatch_group_leave</code> 这两个组合替代 <code>dispatch_group_async</code>, <code>dispatch_group_enter</code>：表示将一个队列中任务放入 group 队列组中，此时 group 队列组任务数加1, <code>dispatch_group_leave</code>：表示将一个队列中任务从 group 队列组撤出，此时 group 队列组任务数减1；一定是配合一对一使用否则 group 任务数不为0(也就是标志是否执行完)，任务数不为0则不会走下一步的监听回调 Block；</li><li>监听所有队列中任务完成的回调，具体任务完成回调监听方法 <code>dispatch_group_notify(队列组，队列，block)</code>；</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GCD 队列组常规使用</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchGroup &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个并发队列</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.zerocc.testQueue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    <span class="comment">// 1. 创建队列组</span></span><br><span class="line">    dispatch_group_t group = dispatch_group_create();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 将队列中的任务添加到队列组 group 中</span></span><br><span class="line">    dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务1---%@&quot;</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务2---%@&quot;</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务3---%@&quot;</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 监听到所有队列中任务已完成</span></span><br><span class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务123都执行完毕---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 执行结果打印</span><br><span class="line">... CCBlogCode[1435:621582] 任务2---&lt;NSThread: 0x1cc07f3c0&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1435:621582] 任务2---&lt;NSThread: 0x1cc07f3c0&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1435:621582] 任务2---&lt;NSThread: 0x1cc07f3c0&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1435:621584] 任务3---&lt;NSThread: 0x1c4263e80&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1435:621584] 任务3---&lt;NSThread: 0x1c4263e80&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1435:621584] 任务3---&lt;NSThread: 0x1c4263e80&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1435:621581] 任务1---&lt;NSThread: 0x1c807db00&gt;&#123;number &#x3D; 5, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1435:621581] 任务1---&lt;NSThread: 0x1c807db00&gt;&#123;number &#x3D; 5, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1435:621581] 任务1---&lt;NSThread: 0x1c807db00&gt;&#123;number &#x3D; 5, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1435:621451] 任务123都执行完毕---&lt;NSThread: 0x1d007c4c0&gt;&#123;number &#x3D; 1, name &#x3D; main&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GCD 队列组 dispatch_group_enter 和 dispatch_group_leave 配合使用</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchGroupEnterAndleave</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;currentThread---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.zerocc.testQueue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_t group = dispatch_group_create();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列1任务1添加进 group 中</span></span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务1---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 队列2任务2添加进 group 中</span></span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务2---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// enter 和 leave 一定是成对的，例如任务2中 少了enter则执行完任务2直接走下面block回调，执行完任务1后会出现崩溃；</span></span><br><span class="line">    <span class="comment">// 如果少了leave则执行完任务1和2后不走下面block回调</span></span><br><span class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务12都执行完毕---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 执行结果打印</span><br><span class="line">... CCBlogCode[1467:622770] currentThread---&lt;NSThread: 0x1d406f940&gt;&#123;number &#x3D; 1, name &#x3D; main&#125;</span><br><span class="line">... CCBlogCode[1467:622862] 任务2---&lt;NSThread: 0x1c806c540&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1467:622862] 任务2---&lt;NSThread: 0x1c806c540&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1467:622858] 任务1---&lt;NSThread: 0x1c406cf40&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1467:622858] 任务1---&lt;NSThread: 0x1c406cf40&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1467:622770] 任务12都执行完毕---&lt;NSThread: 0x1d406f940&gt;&#123;number &#x3D; 1, name &#x3D; main&#125;</span><br></pre></td></tr></table></figure><p>队列组中还有一个方法 <code>dispatch_group_wait(队列组, DISPATCH_TIME_FOREVER)</code>，可以用来阻塞当前线程，这里指的当前线程为队列组 group 所在的线程。</p><h2 id="dispatch-after（GCD-延时执行）"><a href="#dispatch-after（GCD-延时执行）" class="headerlink" title="dispatch_after（GCD 延时执行）"></a>dispatch_after（GCD 延时执行）</h2><p>GCD 延时执行就是针对某个队列中的任务 (block 块中）延迟执行，通过调用方法 <code>dispatch_after(dispatch_time_t when, dispatch_queue_t queue,         dispatch_block_t block)</code> 来指定某个任务在延迟特定的时间后再执行；</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchAfter &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主队列中任务3.0秒后延迟执行，这里也可以换成其它队列</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3.0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;延迟2秒执行---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dispatch-apply（GCD-快速迭代）"><a href="#dispatch-apply（GCD-快速迭代）" class="headerlink" title="dispatch_apply（GCD 快速迭代）"></a>dispatch_apply（GCD 快速迭代）</h2><p>GCD 快速迭代类似于 for 和 while 循环遍历，但是不同的是可以将执行任务代码块添加到指定队列中进行；如果任务在串行队列中执行使用 <code>dispatch_apply</code> 效果等同于一般 for 循环，如果是并发队列进行异步执行的话，<code>dispatch_apply</code> 可以在多个线程同时异步遍历执行，会自动开启新线程执行任务，并且执行的顺序是不固定的。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GCD 快速迭代 并发队列为例</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchApply &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;迭代---begin&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    dispatch_apply(<span class="number">10</span>, queue, ^(size_t index) &#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;迭代%zd---%@&quot;</span>,index, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;迭代---end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 执行结果打印</span><br><span class="line">... CCBlogCode[2001:814061] 迭代---begin</span><br><span class="line">... CCBlogCode[2001:814061] 迭代0---&lt;NSThread: 0x1d4260780&gt;&#123;number &#x3D; 1, name &#x3D; main&#125;</span><br><span class="line">... CCBlogCode[2001:814193] 迭代1---&lt;NSThread: 0x1c807e000&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[2001:814426] 迭代3---&lt;NSThread: 0x1c426c280&gt;&#123;number &#x3D; 5, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[2001:814454] 迭代5---&lt;NSThread: 0x1c0263fc0&gt;&#123;number &#x3D; 7, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[2001:814453] 迭代4---&lt;NSThread: 0x1cc07e340&gt;&#123;number &#x3D; 6, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[2001:814425] 迭代2---&lt;NSThread: 0x1c02642c0&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[2001:814061] 迭代6---&lt;NSThread: 0x1d4260780&gt;&#123;number &#x3D; 1, name &#x3D; main&#125;</span><br><span class="line">... CCBlogCode[2001:814426] 迭代8---&lt;NSThread: 0x1c426c280&gt;&#123;number &#x3D; 5, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[2001:814193] 迭代7---&lt;NSThread: 0x1c807e000&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[2001:814454] 迭代9---&lt;NSThread: 0x1c0263fc0&gt;&#123;number &#x3D; 7, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[2001:814061] 迭代---end</span><br></pre></td></tr></table></figure><h2 id="dispatch-source（GCD-实现定时器）"><a href="#dispatch-source（GCD-实现定时器）" class="headerlink" title="dispatch_source（GCD 实现定时器）"></a><code>dispatch_source</code>（GCD 实现定时器）</h2><p>dispatch_source… 的使用，其中通过调用方法<code>dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue)</code>创建事件，第一个参数为 <code>dispatch_source_type_t</code> 类型，其代表指定事件类型，可以自定义事件或者 Timer 事件还有 Mach 端口相关事件等等，可以 command 点进去看API了；此文只对定时器事件运用分析。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchSource &#123;</span><br><span class="line">    __block <span class="keyword">int</span> timeout = <span class="number">15</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取全局队列</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     1. 创建GCD中的定时器,并将定时器的任务交给全局并发队列执行(不会造成主线程阻塞)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     第一个参数: DISPATCH_SOURCE_TYPE_TIMER source的类型 DISPATCH_SOURCE_TYPE_TIMER 表示是定时器</span></span><br><span class="line"><span class="comment">     第二个参数: 0</span></span><br><span class="line"><span class="comment">     第三个参数: 0</span></span><br><span class="line"><span class="comment">     第四个参数: queue 队列</span></span><br><span class="line"><span class="comment">     返回值： timer dispatch_source_t 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, queue);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 设置定时器(timer 定时器，起始时间，间隔时间，精准度); 1.0 * NSEC_PER_SEC 时间单位为纳秒，设置定时器触发的时间间隔为1s; 0 * NSEC_PER_SEC 精确度 0s</span></span><br><span class="line">    dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, <span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span> * <span class="built_in">NSEC_PER_SEC</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// block内部 使用弱引用修饰 避免循环调用</span></span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>)weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    weakSelf.timerBtn.userInteractionEnabled = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 设置定时器的触发事件</span></span><br><span class="line">    dispatch_source_set_event_handler(timer, ^&#123;</span><br><span class="line">        timeout--;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 回到主队列主线程设置 UI</span></span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="built_in">NSString</span> * title = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%d秒后重新&quot;</span>,timeout];</span><br><span class="line">                [weakSelf.timerBtn setTitle:title forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 5. 取消定时器</span></span><br><span class="line">            dispatch_source_cancel(timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 6. 取消定时器回调</span></span><br><span class="line">    dispatch_source_set_cancel_handler(timer, ^&#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            weakSelf.timerBtn.userInteractionEnabled = <span class="literal">YES</span>;</span><br><span class="line">            [weakSelf.timerBtn setTitle:<span class="string">@&quot;重新获取&quot;</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;定时取消&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 启动定时器</span></span><br><span class="line">    dispatch_resume(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dispatch-barrier-async（GCD-栅栏方法）"><a href="#dispatch-barrier-async（GCD-栅栏方法）" class="headerlink" title="dispatch_barrier_async（GCD 栅栏方法）"></a><code>dispatch_barrier_async</code>（GCD 栅栏方法）</h2><p><code>dispatch_barrier_async</code>作用就是分割其上下两部分任务执行过程，都是异步执行但是先执行其前面的任务先，再执行自身 Block 块中的任务，最后继续往下执行；表现形式就是分割作用。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchBarrier &#123;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;zerocc.com.testQueue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 任务1</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">3</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务1---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 任务2</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务2---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// barrier 分割等待</span></span><br><span class="line">    dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;barrier---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 任务3</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务3---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 执行结果打印</span><br><span class="line">... CCBlogCode[30046:4604551] 任务2---&lt;NSThread: 0x600001bc0300&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[30046:4604553] 任务1---&lt;NSThread: 0x600001bc0900&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[30046:4604551] 任务2---&lt;NSThread: 0x600001bc0300&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[30046:4604553] 任务1---&lt;NSThread: 0x600001bc0900&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[30046:4604553] barrier---&lt;NSThread: 0x600001bc0900&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[30046:4604553] barrier---&lt;NSThread: 0x600001bc0900&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[30046:4604553] 任务3---&lt;NSThread: 0x600001bc0900&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[30046:4604553] 任务3---&lt;NSThread: 0x600001bc0900&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br></pre></td></tr></table></figure><h2 id="dispatch-semaphore（GCD-信号量）"><a href="#dispatch-semaphore（GCD-信号量）" class="headerlink" title="dispatch_semaphore（GCD 信号量）"></a>dispatch_semaphore（GCD 信号量）</h2><p>GCD 信号量可以理解为一个计数器，用来控制线程并发访问的最大数量问题，保证线程同步等。信号量初始值为1，代表只允许当前线程访问资源，当信号量值小与等于零时当前线程就进入休眠等待状态。</p><ul><li>初始化信号量，调用 <code>dispatch_semaphore_create(1)</code> 方法初始化信号量值为1；</li><li>判断信号量值决定其是否能往下继续执行，通过调用方法 <code>dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER)</code>。如果信号量的值大于0，则该方法所处的线程就会继续执行，并且信号量值 -1；如果信号量值 &lt;= 0, 当前线程进入休眠等待状态，也可以通过控制第二个参数使其不一直处于等待状态，例如：DISPATCH_TIME_NOW+3 表示3秒后继续向下执行；</li><li>一个任务执行完后记得使信号量的值加1，通过调用方法 <code>dispatch_semaphore_signal</code>信号值 +1，从而后面任务可以继续执行；</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchSemaphore &#123;</span><br><span class="line">    <span class="comment">// 创建并发队列</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.zerocc.semaphore&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 初始化信号量值为1</span></span><br><span class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 任务1</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 2. 判断信号量值, 信号量 &gt; 0 继续执行并且信号量值 -1；信号量 &lt;= 0, 当前线程进入休眠等待状态</span></span><br><span class="line">        <span class="comment">// 这里信号量为0了，所以任务2要等待ing</span></span><br><span class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务1---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        <span class="comment">// 3. 信号量值 +1</span></span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 任务2</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">3</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务2---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 任务3</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务3---%@&quot;</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 运行结果打印, 任务123先后顺序并不确定，但是是连续的，也就是说一定是保证只有一个线程执行任务，其它线程则是等待状态</span><br><span class="line">... CCBlogCode[1688:347237] 任务1---&lt;NSThread: 0x600003f3d9c0&gt;&#123;number &#x3D; 3, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1688:347235] 任务2---&lt;NSThread: 0x600003f3f1c0&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1688:347235] 任务2---&lt;NSThread: 0x600003f3f1c0&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1688:347235] 任务2---&lt;NSThread: 0x600003f3f1c0&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1688:347234] 任务3---&lt;NSThread: 0x600003f3dc80&gt;&#123;number &#x3D; 5, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1688:347234] 任务3---&lt;NSThread: 0x600003f3dc80&gt;&#123;number &#x3D; 5, name &#x3D; (null)&#125;</span><br><span class="line">... CCBlogCode[1688:347234] 任务3---&lt;NSThread: 0x600003f3dc80&gt;&#123;number &#x3D; 5, name &#x3D; (null)&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Grand Central Dispatch（GCD）&lt;/strong&gt; 是 Apple 开发的一个多核编程的较新的解决方法。它主要用于优化应用程序以支持多核处理器以及其他对称多处理系统。它是一个在线程池模式的基础上执行的并发任务。GCD 可用于多核的并行运算；GCD 会自动利用更多的 CPU 内核（比如双核、四核）；GCD 会自动管理线程的生命周期（创建线程、调度任务、销毁线程）；&lt;/p&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://example.com/categories/iOS/"/>
    
    
    <category term="iOS" scheme="http://example.com/tags/iOS/"/>
    
  </entry>
  
</feed>
